[INFO ] 2019-07-10T00:47:41,457Z [main] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp ... {}
[INFO ] 2019-07-10T00:47:47,889Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-004739.488/nodes/0/cordapps] {}
[INFO ] 2019-07-10T00:47:47,891Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-004739.488/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T00:47:47,900Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-004739.488/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T00:47:47,951Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T00:47:48,155Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T00:47:48,198Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T00:47:48,199Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T00:47:48,285Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T00:47:39.474Z
      epoch=1
  } {}
[INFO ] 2019-07-10T00:47:50,782Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T00:47:50,790Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-004739.488/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T00:47:50,790Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T00:47:50,793Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T00:47:50,819Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T00:47:50,824Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T00:47:51,818Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T00:47:52,078Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T00:47:52,119Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T00:47:52,131Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T00:47:52,132Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T00:47:52,372Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T00:47:52,394Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T00:47:52,394Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562719672394) {}
[INFO ] 2019-07-10T00:47:52,403Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T00:47:52,540Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562719672394) {}
[INFO ] 2019-07-10T00:47:52,597Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T00:47:52,609Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562719672394) {}
[INFO ] 2019-07-10T00:47:52,631Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T00:47:52,670Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=3E47B954D684C112E045D391562DC4F102ECBE5B930922443B125A4CFD6FDDB9 uploader=app filename=null {}
[INFO ] 2019-07-10T00:47:52,673Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-10T00:47:52,674Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-10T00:49:42,453Z [main] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp ... {}
[INFO ] 2019-07-10T00:49:43,577Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-004940.451/nodes/0/cordapps] {}
[INFO ] 2019-07-10T00:49:43,579Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-004940.451/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T00:49:43,588Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-004940.451/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T00:49:43,641Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T00:49:43,848Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T00:49:43,888Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T00:49:43,889Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T00:49:43,999Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T00:49:40.437Z
      epoch=1
  } {}
[INFO ] 2019-07-10T00:49:46,534Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T00:49:46,541Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-004940.451/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T00:49:46,541Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T00:49:46,544Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T00:49:46,590Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T00:49:46,594Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T00:49:47,571Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T00:49:47,791Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T00:49:47,830Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T00:49:47,847Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T00:49:47,848Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T00:49:48,109Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T00:49:48,127Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T00:49:48,128Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562719788127) {}
[INFO ] 2019-07-10T00:49:48,137Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T00:49:48,263Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562719788127) {}
[INFO ] 2019-07-10T00:49:48,318Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T00:49:48,329Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562719788127) {}
[INFO ] 2019-07-10T00:49:48,349Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T00:49:48,384Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=3E47B954D684C112E045D391562DC4F102ECBE5B930922443B125A4CFD6FDDB9 uploader=app filename=null {}
[INFO ] 2019-07-10T00:49:48,387Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-10T00:49:48,389Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-10T00:50:17,785Z [main] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp ... {}
[INFO ] 2019-07-10T00:50:18,901Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-005015.796/nodes/0/cordapps] {}
[INFO ] 2019-07-10T00:50:18,904Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-005015.796/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T00:50:18,913Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-005015.796/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T00:50:18,970Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T00:50:19,172Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T00:50:19,209Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T00:50:19,210Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T00:50:19,321Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T00:50:15.779Z
      epoch=1
  } {}
[INFO ] 2019-07-10T00:50:21,716Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T00:50:21,720Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-005015.796/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T00:50:21,720Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T00:50:21,724Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T00:50:21,760Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T00:50:21,768Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T00:50:22,781Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T00:50:23,016Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T00:50:23,066Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T00:50:23,080Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T00:50:23,080Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T00:50:23,353Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T00:50:23,366Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T00:50:23,366Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562719823366) {}
[INFO ] 2019-07-10T00:50:23,370Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T00:50:23,486Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562719823366) {}
[INFO ] 2019-07-10T00:50:23,531Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T00:50:23,542Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562719823366) {}
[INFO ] 2019-07-10T00:50:23,567Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T00:50:23,603Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=3E47B954D684C112E045D391562DC4F102ECBE5B930922443B125A4CFD6FDDB9 uploader=app filename=null {}
[INFO ] 2019-07-10T00:50:23,606Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-10T00:50:23,607Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-10T00:51:47,741Z [main] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp ... {}
[INFO ] 2019-07-10T00:51:48,859Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-005145.756/nodes/0/cordapps] {}
[INFO ] 2019-07-10T00:51:48,860Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-005145.756/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T00:51:48,868Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-005145.756/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T00:51:48,915Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T00:51:49,120Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T00:51:49,152Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T00:51:49,153Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T00:51:49,259Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T00:51:45.736Z
      epoch=1
  } {}
[INFO ] 2019-07-10T00:51:51,740Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T00:51:51,749Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-005145.756/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T00:51:51,750Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T00:51:51,752Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T00:51:51,804Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T00:51:51,812Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T00:51:52,788Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T00:51:53,040Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T00:51:53,095Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T00:51:53,108Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T00:51:53,108Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T00:51:53,398Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T00:51:53,407Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T00:51:53,407Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562719913407) {}
[INFO ] 2019-07-10T00:51:53,411Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T00:51:53,541Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562719913407) {}
[INFO ] 2019-07-10T00:51:53,595Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T00:51:53,608Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562719913407) {}
[INFO ] 2019-07-10T00:51:53,629Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T00:51:53,663Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=3E47B954D684C112E045D391562DC4F102ECBE5B930922443B125A4CFD6FDDB9 uploader=app filename=null {}
[INFO ] 2019-07-10T00:51:53,665Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-10T00:51:53,667Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-10T00:52:55,674Z [main] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp ... {}
[INFO ] 2019-07-10T00:52:56,767Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-005253.662/nodes/0/cordapps] {}
[INFO ] 2019-07-10T00:52:56,769Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-005253.662/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T00:52:56,778Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-005253.662/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T00:52:56,828Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T00:52:57,040Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T00:52:57,079Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T00:52:57,080Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T00:52:57,177Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T00:52:53.648Z
      epoch=1
  } {}
[INFO ] 2019-07-10T00:52:59,600Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T00:52:59,605Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-005253.662/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T00:52:59,606Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T00:52:59,610Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T00:52:59,656Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T00:52:59,665Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T00:53:00,667Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T00:53:00,899Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T00:53:00,950Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T00:53:00,963Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T00:53:00,963Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T00:53:01,220Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T00:53:01,235Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T00:53:01,236Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562719981235) {}
[INFO ] 2019-07-10T00:53:01,243Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T00:53:01,355Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562719981235) {}
[INFO ] 2019-07-10T00:53:01,407Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T00:53:01,420Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562719981235) {}
[INFO ] 2019-07-10T00:53:01,444Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T00:53:01,479Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=3E47B954D684C112E045D391562DC4F102ECBE5B930922443B125A4CFD6FDDB9 uploader=app filename=null {}
[INFO ] 2019-07-10T00:53:01,481Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-10T00:53:01,483Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-10T00:53:47,844Z [main] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp ... {}
[INFO ] 2019-07-10T00:53:48,923Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-005345.812/nodes/0/cordapps] {}
[INFO ] 2019-07-10T00:53:48,925Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-005345.812/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T00:53:48,934Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-005345.812/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T00:53:48,994Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T00:53:49,203Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T00:53:49,245Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T00:53:49,245Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T00:53:49,353Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T00:53:45.798Z
      epoch=1
  } {}
[INFO ] 2019-07-10T00:53:51,781Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T00:53:51,786Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-005345.812/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T00:53:51,786Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T00:53:51,791Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T00:53:51,837Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T00:53:51,842Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T00:53:52,783Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T00:53:53,045Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T00:53:53,096Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T00:53:53,110Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T00:53:53,111Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T00:53:53,378Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T00:53:53,395Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T00:53:53,395Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562720033395) {}
[INFO ] 2019-07-10T00:53:53,399Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T00:53:53,528Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562720033395) {}
[INFO ] 2019-07-10T00:53:53,587Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T00:53:53,597Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562720033395) {}
[INFO ] 2019-07-10T00:53:53,624Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T00:53:53,659Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=3E47B954D684C112E045D391562DC4F102ECBE5B930922443B125A4CFD6FDDB9 uploader=app filename=null {}
[INFO ] 2019-07-10T00:53:53,661Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-10T00:53:53,663Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-10T00:55:43,077Z [main] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp ... {}
[INFO ] 2019-07-10T00:55:44,166Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-005541.051/nodes/0/cordapps] {}
[INFO ] 2019-07-10T00:55:44,168Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-005541.051/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T00:55:44,176Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-005541.051/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T00:55:44,223Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T00:55:44,424Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T00:55:44,458Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T00:55:44,459Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T00:55:44,573Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T00:55:41.034Z
      epoch=1
  } {}
[INFO ] 2019-07-10T00:55:47,017Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T00:55:47,024Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-005541.051/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T00:55:47,025Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T00:55:47,027Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T00:55:47,073Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T00:55:47,080Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T00:55:48,022Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T00:55:48,283Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T00:55:48,328Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T00:55:48,341Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T00:55:48,341Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T00:55:48,594Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T00:55:48,607Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T00:55:48,608Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562720148607) {}
[INFO ] 2019-07-10T00:55:48,615Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T00:55:48,745Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562720148607) {}
[INFO ] 2019-07-10T00:55:48,805Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T00:55:48,817Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562720148607) {}
[INFO ] 2019-07-10T00:55:48,838Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T00:55:48,872Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=3E47B954D684C112E045D391562DC4F102ECBE5B930922443B125A4CFD6FDDB9 uploader=app filename=null {}
[INFO ] 2019-07-10T00:55:48,874Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-10T00:55:48,876Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-10T00:56:52,227Z [main] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp ... {}
[INFO ] 2019-07-10T00:56:53,292Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-005650.158/nodes/0/cordapps] {}
[INFO ] 2019-07-10T00:56:53,295Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-005650.158/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T00:56:53,304Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-005650.158/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T00:56:53,358Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T00:56:53,578Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T00:56:53,616Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T00:56:53,616Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T00:56:53,726Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T00:56:50.141Z
      epoch=1
  } {}
[INFO ] 2019-07-10T00:56:56,169Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T00:56:56,177Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-005650.158/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T00:56:56,177Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T00:56:56,179Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T00:56:56,231Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T00:56:56,236Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T00:56:57,207Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T00:56:57,450Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T00:56:57,505Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T00:56:57,518Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T00:56:57,518Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T00:56:57,818Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T00:56:57,826Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T00:56:57,826Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562720217826) {}
[INFO ] 2019-07-10T00:56:57,829Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T00:56:57,935Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562720217826) {}
[INFO ] 2019-07-10T00:56:57,990Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T00:56:58,002Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562720217826) {}
[INFO ] 2019-07-10T00:56:58,027Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T00:56:58,063Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=3E47B954D684C112E045D391562DC4F102ECBE5B930922443B125A4CFD6FDDB9 uploader=app filename=null {}
[INFO ] 2019-07-10T00:56:58,065Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-10T00:56:58,067Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-10T00:57:36,597Z [main] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp ... {}
[INFO ] 2019-07-10T00:57:40,738Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-005734.566/nodes/0/cordapps] {}
[INFO ] 2019-07-10T00:57:40,739Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-005734.566/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T00:57:40,747Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-005734.566/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T00:57:40,795Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T00:57:41,010Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T00:57:41,049Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T00:57:41,050Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T00:57:41,158Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T00:57:34.551Z
      epoch=1
  } {}
[INFO ] 2019-07-10T00:57:43,624Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T00:57:43,629Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-005734.566/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T00:57:43,629Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T00:57:43,630Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T00:57:43,657Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T00:57:43,664Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T00:57:44,761Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T00:57:45,006Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T00:57:45,046Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T00:57:45,059Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T00:57:45,059Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T00:57:45,295Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T00:57:45,303Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T00:57:45,303Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562720265303) {}
[INFO ] 2019-07-10T00:57:45,306Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T00:57:45,408Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562720265303) {}
[INFO ] 2019-07-10T00:57:45,457Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T00:57:45,467Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562720265303) {}
[INFO ] 2019-07-10T00:57:45,487Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T00:57:45,525Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=3E47B954D684C112E045D391562DC4F102ECBE5B930922443B125A4CFD6FDDB9 uploader=app filename=null {}
[INFO ] 2019-07-10T00:57:45,529Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-10T00:57:45,530Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-10T01:02:53,932Z [main] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp ... {}
[INFO ] 2019-07-10T01:02:55,103Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-010251.916/nodes/0/cordapps] {}
[INFO ] 2019-07-10T01:02:55,104Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-010251.916/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T01:02:55,117Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-010251.916/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T01:02:55,165Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T01:02:55,364Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T01:02:55,407Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:02:55,407Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:02:55,520Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T01:02:51.903Z
      epoch=1
  } {}
[INFO ] 2019-07-10T01:02:58,081Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T01:02:58,090Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-010251.916/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T01:02:58,090Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T01:02:58,092Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T01:02:58,131Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:02:58,134Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:02:59,124Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:02:59,361Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T01:02:59,414Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T01:02:59,427Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T01:02:59,428Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T01:02:59,679Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T01:02:59,693Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T01:02:59,694Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562720579693) {}
[INFO ] 2019-07-10T01:02:59,701Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:02:59,816Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562720579693) {}
[INFO ] 2019-07-10T01:02:59,865Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T01:02:59,876Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562720579693) {}
[INFO ] 2019-07-10T01:02:59,913Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:02:59,945Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=3E47B954D684C112E045D391562DC4F102ECBE5B930922443B125A4CFD6FDDB9 uploader=app filename=null {}
[INFO ] 2019-07-10T01:02:59,948Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-10T01:02:59,950Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-10T01:04:22,712Z [main] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp ... {}
[INFO ] 2019-07-10T01:04:26,825Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-010420.558/nodes/0/cordapps] {}
[INFO ] 2019-07-10T01:04:26,827Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-010420.558/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T01:04:26,836Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-010420.558/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T01:04:26,886Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T01:04:27,108Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T01:04:27,143Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:04:27,144Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:04:27,246Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T01:04:20.544Z
      epoch=1
  } {}
[INFO ] 2019-07-10T01:04:29,845Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T01:04:29,848Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-010420.558/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T01:04:29,848Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T01:04:29,849Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T01:04:29,871Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:04:29,873Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:04:30,951Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:04:31,223Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T01:04:31,265Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T01:04:31,280Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T01:04:31,280Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T01:04:31,542Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T01:04:31,557Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T01:04:31,558Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562720671557) {}
[INFO ] 2019-07-10T01:04:31,566Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:04:31,704Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562720671557) {}
[INFO ] 2019-07-10T01:04:31,758Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T01:04:31,769Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562720671557) {}
[INFO ] 2019-07-10T01:04:31,789Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:04:31,828Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=3E47B954D684C112E045D391562DC4F102ECBE5B930922443B125A4CFD6FDDB9 uploader=app filename=null {}
[INFO ] 2019-07-10T01:04:31,831Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-10T01:04:31,834Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-10T01:17:06,343Z [main] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp ... {}
[INFO ] 2019-07-10T01:17:07,480Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-011704.300/nodes/0/cordapps] {}
[INFO ] 2019-07-10T01:17:07,481Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-011704.300/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T01:17:07,490Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-011704.300/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T01:17:07,543Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T01:17:07,744Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T01:17:07,782Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:17:07,782Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:17:07,898Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T01:17:04.285Z
      epoch=1
  } {}
[INFO ] 2019-07-10T01:17:10,517Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T01:17:10,523Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-011704.300/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T01:17:10,524Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T01:17:10,528Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T01:17:10,553Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:17:10,556Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:17:11,582Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:17:11,829Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T01:17:11,888Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T01:17:11,901Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T01:17:11,901Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T01:17:12,165Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T01:17:12,181Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T01:17:12,181Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562721432181) {}
[INFO ] 2019-07-10T01:17:12,186Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:17:12,301Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562721432181) {}
[INFO ] 2019-07-10T01:17:12,354Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T01:17:12,374Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562721432181) {}
[INFO ] 2019-07-10T01:17:12,399Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:17:12,434Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=3E47B954D684C112E045D391562DC4F102ECBE5B930922443B125A4CFD6FDDB9 uploader=app filename=null {}
[INFO ] 2019-07-10T01:17:12,436Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-10T01:17:12,438Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-10T01:23:42,522Z [main] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp ... {}
[INFO ] 2019-07-10T01:23:43,887Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-012338.336/nodes/0/cordapps] {}
[INFO ] 2019-07-10T01:23:43,891Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-012338.336/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T01:23:43,909Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-012338.336/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T01:23:43,974Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T01:23:44,510Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T01:23:44,571Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:23:44,572Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:23:44,737Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T01:23:38.209Z
      epoch=1
  } {}
[INFO ] 2019-07-10T01:23:48,634Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T01:23:48,637Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-012338.336/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T01:23:48,637Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T01:23:48,639Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T01:23:48,677Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:23:48,681Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:23:50,403Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:23:50,998Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T01:23:51,065Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T01:23:51,088Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T01:23:51,088Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T01:23:51,318Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T01:23:51,325Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T01:23:51,325Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562721831325) {}
[INFO ] 2019-07-10T01:23:51,329Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:23:51,459Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562721831325) {}
[INFO ] 2019-07-10T01:23:51,519Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T01:23:51,534Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562721831325) {}
[INFO ] 2019-07-10T01:23:51,559Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:23:51,596Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=3E47B954D684C112E045D391562DC4F102ECBE5B930922443B125A4CFD6FDDB9 uploader=app filename=null {}
[INFO ] 2019-07-10T01:23:51,599Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-10T01:23:51,602Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-10T01:23:51,927Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562721831325) {}
[INFO ] 2019-07-10T01:23:51,941Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562721831325) {}
[INFO ] 2019-07-10T01:23:51,942Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:23:51,942Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562721831325) {}
[INFO ] 2019-07-10T01:23:51,942Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:23:51,945Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-012338.336/nodes/1/cordapps] {}
[INFO ] 2019-07-10T01:23:51,946Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-012338.336/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T01:23:51,946Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-012338.336/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T01:23:51,967Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T01:23:51,973Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T01:23:51,994Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:23:51,994Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:23:51,997Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T01:23:38.209Z
      epoch=1
  } {}
[INFO ] 2019-07-10T01:23:52,374Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T01:23:52,376Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-012338.336/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T01:23:52,376Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T01:23:52,378Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T01:23:52,384Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:23:52,384Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:23:52,467Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:23:52,475Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T01:23:52,477Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T01:23:52,478Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-10T01:23:52,493Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:23:52,494Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:23:52,607Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:23:52,611Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T01:23:52,611Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562721832611) {}
[INFO ] 2019-07-10T01:23:52,613Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:23:52,621Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562721832611) {}
[INFO ] 2019-07-10T01:23:52,627Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T01:23:52,630Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562721832611) {}
[INFO ] 2019-07-10T01:23:52,635Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:23:52,671Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=3E47B954D684C112E045D391562DC4F102ECBE5B930922443B125A4CFD6FDDB9 uploader=app filename=null {}
[INFO ] 2019-07-10T01:23:52,678Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562721832611) {}
[INFO ] 2019-07-10T01:23:52,681Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562721831325) {}
[INFO ] 2019-07-10T01:23:52,682Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:23:52,691Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562721832611) {}
[INFO ] 2019-07-10T01:23:52,692Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:23:52,700Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562721832611) {}
[INFO ] 2019-07-10T01:23:52,700Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:23:52,700Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562721832611) {}
[INFO ] 2019-07-10T01:23:52,700Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:23:52,702Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-012338.336/nodes/2/cordapps] {}
[INFO ] 2019-07-10T01:23:52,703Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-012338.336/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T01:23:52,703Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-012338.336/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T01:23:52,719Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T01:23:52,725Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T01:23:52,742Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:23:52,743Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:23:52,745Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T01:23:38.209Z
      epoch=1
  } {}
[INFO ] 2019-07-10T01:23:53,095Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T01:23:53,096Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-012338.336/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T01:23:53,096Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T01:23:53,097Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T01:23:53,099Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:23:53,099Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:23:53,165Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:23:53,172Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T01:23:53,173Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T01:23:53,174Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-10T01:23:53,189Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:23:53,189Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:23:53,285Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:23:53,288Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T01:23:53,288Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562721833288) {}
[INFO ] 2019-07-10T01:23:53,290Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:23:53,295Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562721833288) {}
[INFO ] 2019-07-10T01:23:53,303Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T01:23:53,308Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562721833288) {}
[INFO ] 2019-07-10T01:23:53,314Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:23:53,350Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=3E47B954D684C112E045D391562DC4F102ECBE5B930922443B125A4CFD6FDDB9 uploader=app filename=null {}
[INFO ] 2019-07-10T01:23:53,356Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562721833288) {}
[INFO ] 2019-07-10T01:23:53,358Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562721831325) {}
[INFO ] 2019-07-10T01:23:53,359Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:23:53,367Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562721833288) {}
[INFO ] 2019-07-10T01:23:53,368Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:23:53,377Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562721832611) {}
[INFO ] 2019-07-10T01:23:53,378Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:23:53,385Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562721833288) {}
[INFO ] 2019-07-10T01:23:53,386Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:23:53,394Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562721833288) {}
[INFO ] 2019-07-10T01:23:53,394Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:23:53,394Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562721833288) {}
[INFO ] 2019-07-10T01:23:53,394Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:23:53,596Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a505936a-b2cc-442e-8f83-b167dd64b909, invocation_id=d497f164-25f8-45c7-b17a-fe9768fc13f6, invocation_timestamp=2019-07-10T01:23:53.415Z, origin=Only For Testing, session_id=d497f164-25f8-45c7-b17a-fe9768fc13f6, session_timestamp=2019-07-10T01:23:53.415Z, thread-id=182}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[classes/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[classes/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-10T01:23:53,602Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [a505936a-b2cc-442e-8f83-b167dd64b909] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=d497f164-25f8-45c7-b17a-fe9768fc13f6, timestamp: 2019-07-10T01:23:53.415Z, entityType: Invocation, sessionId=d497f164-25f8-45c7-b17a-fe9768fc13f6, timestamp: 2019-07-10T01:23:53.415Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=3E47B954D684C112E045D391562DC4F102ECBE5B930922443B125A4CFD6FDDB9), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=B0E7BDE6BB49D763DE139799F5135477DEE8509EF840360E3FBC62F858088AFD), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@febc56f, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=0c028f75-22f9-4ff8-bc78-65f7bcadbd7d) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a505936a-b2cc-442e-8f83-b167dd64b909, invocation_id=d497f164-25f8-45c7-b17a-fe9768fc13f6, invocation_timestamp=2019-07-10T01:23:53.415Z, origin=Only For Testing, session_id=d497f164-25f8-45c7-b17a-fe9768fc13f6, session_timestamp=2019-07-10T01:23:53.415Z, thread-id=182}
[INFO ] 2019-07-10T01:23:53,604Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [a505936a-b2cc-442e-8f83-b167dd64b909] has error [0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a505936a-b2cc-442e-8f83-b167dd64b909, invocation_id=d497f164-25f8-45c7-b17a-fe9768fc13f6, invocation_timestamp=2019-07-10T01:23:53.415Z, origin=Only For Testing, session_id=d497f164-25f8-45c7-b17a-fe9768fc13f6, session_timestamp=2019-07-10T01:23:53.415Z, thread-id=182}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[classes/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[classes/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-10T01:23:53,604Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [a505936a-b2cc-442e-8f83-b167dd64b909] error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a505936a-b2cc-442e-8f83-b167dd64b909, invocation_id=d497f164-25f8-45c7-b17a-fe9768fc13f6, invocation_timestamp=2019-07-10T01:23:53.415Z, origin=Only For Testing, session_id=d497f164-25f8-45c7-b17a-fe9768fc13f6, session_timestamp=2019-07-10T01:23:53.415Z, thread-id=182}
[WARN ] 2019-07-10T01:23:53,618Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [a505936a-b2cc-442e-8f83-b167dd64b909] errored, dumping all transitions:

 --- Transition of flow [a505936a-b2cc-442e-8f83-b167dd64b909] ---
  Timestamp: 2019-07-10T01:23:53.582Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[a505936a-b2cc-442e-8f83-b167dd64b909], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=d497f164-25f8-45c7-b17a-fe9768fc13f6, timestamp: 2019-07-10T01:23:53.415Z, entityType: Invocation, sessionId=d497f164-25f8-45c7-b17a-fe9768fc13f6, timestamp: 2019-07-10T01:23:53.415Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=3E47B954D684C112E045D391562DC4F102ECBE5B930922443B125A4CFD6FDDB9), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=B0E7BDE6BB49D763DE139799F5135477DEE8509EF840360E3FBC62F858088AFD), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7888504d])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7888504d])
    SignalFlowHasStarted(flowId=[a505936a-b2cc-442e-8f83-b167dd64b909])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7888504d]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [a505936a-b2cc-442e-8f83-b167dd64b909] ---
  Timestamp: 2019-07-10T01:23:53.606Z
  Event: Error(exception=java.lang.NullPointerException)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=2607134372637934995, exception=java.lang.NullPointerException)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [a505936a-b2cc-442e-8f83-b167dd64b909] ---
  Timestamp: 2019-07-10T01:23:53.609Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [a505936a-b2cc-442e-8f83-b167dd64b909] ---
  Timestamp: 2019-07-10T01:23:53.611Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a505936a-b2cc-442e-8f83-b167dd64b909, invocation_id=d497f164-25f8-45c7-b17a-fe9768fc13f6, invocation_timestamp=2019-07-10T01:23:53.415Z, origin=Only For Testing, session_id=d497f164-25f8-45c7-b17a-fe9768fc13f6, session_timestamp=2019-07-10T01:23:53.415Z, thread-id=182}
[WARN ] 2019-07-10T01:23:53,618Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [a505936a-b2cc-442e-8f83-b167dd64b909] error [errorCode=2dbb7n, moreInformationAt=https://errors.corda.net/OS/4.0/2dbb7n] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a505936a-b2cc-442e-8f83-b167dd64b909, invocation_id=d497f164-25f8-45c7-b17a-fe9768fc13f6, invocation_timestamp=2019-07-10T01:23:53.415Z, origin=Only For Testing, session_id=d497f164-25f8-45c7-b17a-fe9768fc13f6, session_timestamp=2019-07-10T01:23:53.415Z, thread-id=182}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[classes/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[classes/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2019-07-10T01:23:53,621Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a505936a-b2cc-442e-8f83-b167dd64b909, invocation_id=d497f164-25f8-45c7-b17a-fe9768fc13f6, invocation_timestamp=2019-07-10T01:23:53.415Z, origin=Only For Testing, session_id=d497f164-25f8-45c7-b17a-fe9768fc13f6, session_timestamp=2019-07-10T01:23:53.415Z, thread-id=182}
[WARN ] 2019-07-10T01:23:53,654Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [a505936a-b2cc-442e-8f83-b167dd64b909] errored, dumping all transitions:

 --- Transition of flow [a505936a-b2cc-442e-8f83-b167dd64b909] ---
  Timestamp: 2019-07-10T01:23:53.582Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[a505936a-b2cc-442e-8f83-b167dd64b909], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=d497f164-25f8-45c7-b17a-fe9768fc13f6, timestamp: 2019-07-10T01:23:53.415Z, entityType: Invocation, sessionId=d497f164-25f8-45c7-b17a-fe9768fc13f6, timestamp: 2019-07-10T01:23:53.415Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=3E47B954D684C112E045D391562DC4F102ECBE5B930922443B125A4CFD6FDDB9), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=B0E7BDE6BB49D763DE139799F5135477DEE8509EF840360E3FBC62F858088AFD), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7888504d])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7888504d])
    SignalFlowHasStarted(flowId=[a505936a-b2cc-442e-8f83-b167dd64b909])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7888504d]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [a505936a-b2cc-442e-8f83-b167dd64b909] ---
  Timestamp: 2019-07-10T01:23:53.606Z
  Event: Error(exception=java.lang.NullPointerException)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=2607134372637934995, exception=java.lang.NullPointerException)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [a505936a-b2cc-442e-8f83-b167dd64b909] ---
  Timestamp: 2019-07-10T01:23:53.609Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [a505936a-b2cc-442e-8f83-b167dd64b909] ---
  Timestamp: 2019-07-10T01:23:53.611Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [a505936a-b2cc-442e-8f83-b167dd64b909] ---
  Timestamp: 2019-07-10T01:23:53.650Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=2607134372637934995)], sessions=[], senderUUID=0c028f75-22f9-4ff8-bc78-65f7bcadbd7d)
    CreateTransaction
    RemoveCheckpoint(id=[a505936a-b2cc-442e-8f83-b167dd64b909])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=a505936a-b2cc-442e-8f83-b167dd64b909)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[a505936a-b2cc-442e-8f83-b167dd64b909], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=2607134372637934995, exception=java.lang.NullPointerException)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=d497f164-25f8-45c7-b17a-fe9768fc13f6, timestamp: 2019-07-10T01:23:53.415Z, entityType: Invocation, sessionId=d497f164-25f8-45c7-b17a-fe9768fc13f6, timestamp: 2019-07-10T01:23:53.415Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=3E47B954D684C112E045D391562DC4F102ECBE5B930922443B125A4CFD6FDDB9), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=B0E7BDE6BB49D763DE139799F5135477DEE8509EF840360E3FBC62F858088AFD), errorState=Errored(errors=[FlowError(errorId=2607134372637934995, exception=java.lang.NullPointerException)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@febc56f, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=0c028f75-22f9-4ff8-bc78-65f7bcadbd7d))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a505936a-b2cc-442e-8f83-b167dd64b909, invocation_id=d497f164-25f8-45c7-b17a-fe9768fc13f6, invocation_timestamp=2019-07-10T01:23:53.415Z, origin=Only For Testing, session_id=d497f164-25f8-45c7-b17a-fe9768fc13f6, session_timestamp=2019-07-10T01:23:53.415Z, thread-id=182}
[WARN ] 2019-07-10T01:23:53,654Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [a505936a-b2cc-442e-8f83-b167dd64b909] error [errorCode=2dbb7n, moreInformationAt=https://errors.corda.net/OS/4.0/2dbb7n] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a505936a-b2cc-442e-8f83-b167dd64b909, invocation_id=d497f164-25f8-45c7-b17a-fe9768fc13f6, invocation_timestamp=2019-07-10T01:23:53.415Z, origin=Only For Testing, session_id=d497f164-25f8-45c7-b17a-fe9768fc13f6, session_timestamp=2019-07-10T01:23:53.415Z, thread-id=182}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[classes/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[classes/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_212]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_212]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_212]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_212]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-07-10T01:34:16,108Z [main] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp ... {}
[INFO ] 2019-07-10T01:34:19,699Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-013411.817/nodes/0/cordapps] {}
[INFO ] 2019-07-10T01:34:19,706Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013411.817/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T01:34:19,728Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013411.817/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T01:34:19,789Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T01:34:20,390Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T01:34:20,456Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:34:20,456Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:34:20,613Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T01:34:11.670Z
      epoch=1
  } {}
[INFO ] 2019-07-10T01:34:24,184Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T01:34:24,189Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-013411.817/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T01:34:24,189Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T01:34:24,192Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T01:34:24,263Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:34:24,267Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:34:25,955Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:34:26,623Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T01:34:26,664Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T01:34:26,679Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T01:34:26,679Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T01:34:26,982Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T01:34:26,992Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T01:34:26,992Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722466992) {}
[INFO ] 2019-07-10T01:34:26,996Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:34:27,149Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722466992) {}
[INFO ] 2019-07-10T01:34:27,211Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T01:34:27,225Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722466992) {}
[INFO ] 2019-07-10T01:34:27,255Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:34:27,291Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=64FEF25EC5F8E0513D4E4C250F2D1A440BA418A7260BDB48391FEE417CDCC19B uploader=app filename=null {}
[INFO ] 2019-07-10T01:34:27,293Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-10T01:34:27,296Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-10T01:34:27,636Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722466992) {}
[INFO ] 2019-07-10T01:34:27,651Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722466992) {}
[INFO ] 2019-07-10T01:34:27,652Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:34:27,652Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722466992) {}
[INFO ] 2019-07-10T01:34:27,652Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:34:27,655Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-013411.817/nodes/1/cordapps] {}
[INFO ] 2019-07-10T01:34:27,656Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013411.817/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T01:34:27,656Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013411.817/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T01:34:27,679Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T01:34:27,686Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T01:34:27,709Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:34:27,710Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:34:27,713Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T01:34:11.670Z
      epoch=1
  } {}
[INFO ] 2019-07-10T01:34:28,171Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T01:34:28,175Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-013411.817/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T01:34:28,175Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T01:34:28,179Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T01:34:28,181Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:34:28,181Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:34:28,286Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:34:28,296Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T01:34:28,298Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T01:34:28,299Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-10T01:34:28,323Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:34:28,323Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:34:28,475Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:34:28,479Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T01:34:28,479Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722468479) {}
[INFO ] 2019-07-10T01:34:28,481Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:34:28,488Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722468479) {}
[INFO ] 2019-07-10T01:34:28,495Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T01:34:28,498Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722468479) {}
[INFO ] 2019-07-10T01:34:28,503Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:34:28,543Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=64FEF25EC5F8E0513D4E4C250F2D1A440BA418A7260BDB48391FEE417CDCC19B uploader=app filename=null {}
[INFO ] 2019-07-10T01:34:28,556Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722468479) {}
[INFO ] 2019-07-10T01:34:28,563Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722466992) {}
[INFO ] 2019-07-10T01:34:28,564Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:34:28,580Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722468479) {}
[INFO ] 2019-07-10T01:34:28,584Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:34:28,603Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722468479) {}
[INFO ] 2019-07-10T01:34:28,604Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:34:28,604Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722468479) {}
[INFO ] 2019-07-10T01:34:28,604Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:34:28,610Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-013411.817/nodes/2/cordapps] {}
[INFO ] 2019-07-10T01:34:28,610Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013411.817/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T01:34:28,611Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013411.817/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T01:34:28,636Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T01:34:28,644Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T01:34:28,663Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:34:28,664Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:34:28,666Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T01:34:11.670Z
      epoch=1
  } {}
[INFO ] 2019-07-10T01:34:29,066Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T01:34:29,067Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-013411.817/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T01:34:29,068Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T01:34:29,069Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T01:34:29,074Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:34:29,074Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:34:29,179Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:34:29,197Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T01:34:29,201Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T01:34:29,202Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-10T01:34:29,223Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:34:29,223Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:34:29,349Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:34:29,356Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T01:34:29,356Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722469356) {}
[INFO ] 2019-07-10T01:34:29,363Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:34:29,381Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722469356) {}
[INFO ] 2019-07-10T01:34:29,395Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T01:34:29,398Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722469356) {}
[INFO ] 2019-07-10T01:34:29,406Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:34:29,440Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=64FEF25EC5F8E0513D4E4C250F2D1A440BA418A7260BDB48391FEE417CDCC19B uploader=app filename=null {}
[INFO ] 2019-07-10T01:34:29,446Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722469356) {}
[INFO ] 2019-07-10T01:34:29,448Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722466992) {}
[INFO ] 2019-07-10T01:34:29,449Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:34:29,456Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722469356) {}
[INFO ] 2019-07-10T01:34:29,457Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:34:29,470Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722468479) {}
[INFO ] 2019-07-10T01:34:29,471Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:34:29,479Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722469356) {}
[INFO ] 2019-07-10T01:34:29,480Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:34:29,494Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722469356) {}
[INFO ] 2019-07-10T01:34:29,495Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:34:29,495Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722469356) {}
[INFO ] 2019-07-10T01:34:29,495Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2019-07-10T01:34:29,760Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=cfaba555-5284-43ff-a908-ba3855332a57, invocation_id=ec3008eb-0e06-4b59-a2a4-8d39e3e27c76, invocation_timestamp=2019-07-10T01:34:29.534Z, origin=Only For Testing, session_id=ec3008eb-0e06-4b59-a2a4-8d39e3e27c76, session_timestamp=2019-07-10T01:34:29.534Z, thread-id=182}
[WARN ] 2019-07-10T01:34:29,760Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=cfaba555-5284-43ff-a908-ba3855332a57, invocation_id=ec3008eb-0e06-4b59-a2a4-8d39e3e27c76, invocation_timestamp=2019-07-10T01:34:29.534Z, origin=Only For Testing, session_id=ec3008eb-0e06-4b59-a2a4-8d39e3e27c76, session_timestamp=2019-07-10T01:34:29.534Z, thread-id=182}
[WARN ] 2019-07-10T01:34:30,626Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=cfaba555-5284-43ff-a908-ba3855332a57, invocation_id=ec3008eb-0e06-4b59-a2a4-8d39e3e27c76, invocation_timestamp=2019-07-10T01:34:29.534Z, origin=Only For Testing, session_id=ec3008eb-0e06-4b59-a2a4-8d39e3e27c76, session_timestamp=2019-07-10T01:34:29.534Z, thread-id=182}
[INFO ] 2019-07-10T01:34:30,823Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=e6cc04ca-2004-426a-9408-73d62c4611f1, invocation_id=597736d1-de7e-43a5-bd1f-09500cba6c50, invocation_timestamp=2019-07-10T01:34:30.769Z, origin=O=Mock Company 1, L=London, C=GB, session_id=597736d1-de7e-43a5-bd1f-09500cba6c50, session_timestamp=2019-07-10T01:34:30.769Z, thread-id=182, tx_id=60CF70FF8E5DA9F03E4F816C3C83313908D1E884D48AC174F672155E57B0694A}
[WARN ] 2019-07-10T01:34:30,833Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=e6cc04ca-2004-426a-9408-73d62c4611f1, invocation_id=597736d1-de7e-43a5-bd1f-09500cba6c50, invocation_timestamp=2019-07-10T01:34:30.769Z, origin=O=Mock Company 1, L=London, C=GB, session_id=597736d1-de7e-43a5-bd1f-09500cba6c50, session_timestamp=2019-07-10T01:34:30.769Z, thread-id=182, tx_id=60CF70FF8E5DA9F03E4F816C3C83313908D1E884D48AC174F672155E57B0694A}
[INFO ] 2019-07-10T01:34:30,866Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=e6cc04ca-2004-426a-9408-73d62c4611f1, invocation_id=597736d1-de7e-43a5-bd1f-09500cba6c50, invocation_timestamp=2019-07-10T01:34:30.769Z, origin=O=Mock Company 1, L=London, C=GB, session_id=597736d1-de7e-43a5-bd1f-09500cba6c50, session_timestamp=2019-07-10T01:34:30.769Z, thread-id=182, tx_id=60CF70FF8E5DA9F03E4F816C3C83313908D1E884D48AC174F672155E57B0694A}
[WARN ] 2019-07-10T01:34:30,911Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=e6cc04ca-2004-426a-9408-73d62c4611f1, invocation_id=597736d1-de7e-43a5-bd1f-09500cba6c50, invocation_timestamp=2019-07-10T01:34:30.769Z, origin=O=Mock Company 1, L=London, C=GB, session_id=597736d1-de7e-43a5-bd1f-09500cba6c50, session_timestamp=2019-07-10T01:34:30.769Z, thread-id=182, tx_id=60CF70FF8E5DA9F03E4F816C3C83313908D1E884D48AC174F672155E57B0694A}
[INFO ] 2019-07-10T01:34:30,935Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=cfaba555-5284-43ff-a908-ba3855332a57, invocation_id=ec3008eb-0e06-4b59-a2a4-8d39e3e27c76, invocation_timestamp=2019-07-10T01:34:29.534Z, origin=Only For Testing, session_id=ec3008eb-0e06-4b59-a2a4-8d39e3e27c76, session_timestamp=2019-07-10T01:34:29.534Z, thread-id=182, tx_id=60CF70FF8E5DA9F03E4F816C3C83313908D1E884D48AC174F672155E57B0694A}
[INFO ] 2019-07-10T01:34:30,935Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=cfaba555-5284-43ff-a908-ba3855332a57, invocation_id=ec3008eb-0e06-4b59-a2a4-8d39e3e27c76, invocation_timestamp=2019-07-10T01:34:29.534Z, origin=Only For Testing, session_id=ec3008eb-0e06-4b59-a2a4-8d39e3e27c76, session_timestamp=2019-07-10T01:34:29.534Z, thread-id=182, tx_id=60CF70FF8E5DA9F03E4F816C3C83313908D1E884D48AC174F672155E57B0694A}
[INFO ] 2019-07-10T01:34:30,966Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=cfaba555-5284-43ff-a908-ba3855332a57, invocation_id=ec3008eb-0e06-4b59-a2a4-8d39e3e27c76, invocation_timestamp=2019-07-10T01:34:29.534Z, origin=Only For Testing, session_id=ec3008eb-0e06-4b59-a2a4-8d39e3e27c76, session_timestamp=2019-07-10T01:34:29.534Z, thread-id=182, tx_id=60CF70FF8E5DA9F03E4F816C3C83313908D1E884D48AC174F672155E57B0694A}
[INFO ] 2019-07-10T01:34:30,983Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=e6cc04ca-2004-426a-9408-73d62c4611f1, invocation_id=597736d1-de7e-43a5-bd1f-09500cba6c50, invocation_timestamp=2019-07-10T01:34:30.769Z, origin=O=Mock Company 1, L=London, C=GB, session_id=597736d1-de7e-43a5-bd1f-09500cba6c50, session_timestamp=2019-07-10T01:34:30.769Z, thread-id=182, tx_id=60CF70FF8E5DA9F03E4F816C3C83313908D1E884D48AC174F672155E57B0694A}
[WARN ] 2019-07-10T01:34:30,983Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=e6cc04ca-2004-426a-9408-73d62c4611f1, invocation_id=597736d1-de7e-43a5-bd1f-09500cba6c50, invocation_timestamp=2019-07-10T01:34:30.769Z, origin=O=Mock Company 1, L=London, C=GB, session_id=597736d1-de7e-43a5-bd1f-09500cba6c50, session_timestamp=2019-07-10T01:34:30.769Z, thread-id=182, tx_id=60CF70FF8E5DA9F03E4F816C3C83313908D1E884D48AC174F672155E57B0694A}
[INFO ] 2019-07-10T01:34:30,988Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=e6cc04ca-2004-426a-9408-73d62c4611f1, invocation_id=597736d1-de7e-43a5-bd1f-09500cba6c50, invocation_timestamp=2019-07-10T01:34:30.769Z, origin=O=Mock Company 1, L=London, C=GB, session_id=597736d1-de7e-43a5-bd1f-09500cba6c50, session_timestamp=2019-07-10T01:34:30.769Z, thread-id=182, tx_id=60CF70FF8E5DA9F03E4F816C3C83313908D1E884D48AC174F672155E57B0694A}
[INFO ] 2019-07-10T01:34:30,992Z [Mock network] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000002, flow-id=e6cc04ca-2004-426a-9408-73d62c4611f1, invocation_id=597736d1-de7e-43a5-bd1f-09500cba6c50, invocation_timestamp=2019-07-10T01:34:30.769Z, origin=O=Mock Company 1, L=London, C=GB, session_id=597736d1-de7e-43a5-bd1f-09500cba6c50, session_timestamp=2019-07-10T01:34:30.769Z, thread-id=182, tx_id=60CF70FF8E5DA9F03E4F816C3C83313908D1E884D48AC174F672155E57B0694A}
[INFO ] 2019-07-10T01:34:30,996Z [Mock network] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000002, flow-id=e6cc04ca-2004-426a-9408-73d62c4611f1, invocation_id=597736d1-de7e-43a5-bd1f-09500cba6c50, invocation_timestamp=2019-07-10T01:34:30.769Z, origin=O=Mock Company 1, L=London, C=GB, session_id=597736d1-de7e-43a5-bd1f-09500cba6c50, session_timestamp=2019-07-10T01:34:30.769Z, thread-id=182, tx_id=60CF70FF8E5DA9F03E4F816C3C83313908D1E884D48AC174F672155E57B0694A}
[INFO ] 2019-07-10T01:34:31,021Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=cfaba555-5284-43ff-a908-ba3855332a57, invocation_id=ec3008eb-0e06-4b59-a2a4-8d39e3e27c76, invocation_timestamp=2019-07-10T01:34:29.534Z, origin=Only For Testing, session_id=ec3008eb-0e06-4b59-a2a4-8d39e3e27c76, session_timestamp=2019-07-10T01:34:29.534Z, thread-id=182, tx_id=60CF70FF8E5DA9F03E4F816C3C83313908D1E884D48AC174F672155E57B0694A}
[INFO ] 2019-07-10T01:34:31,021Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=cfaba555-5284-43ff-a908-ba3855332a57, invocation_id=ec3008eb-0e06-4b59-a2a4-8d39e3e27c76, invocation_timestamp=2019-07-10T01:34:29.534Z, origin=Only For Testing, session_id=ec3008eb-0e06-4b59-a2a4-8d39e3e27c76, session_timestamp=2019-07-10T01:34:29.534Z, thread-id=182, tx_id=60CF70FF8E5DA9F03E4F816C3C83313908D1E884D48AC174F672155E57B0694A}
[INFO ] 2019-07-10T01:34:53,923Z [main] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp ... {}
[INFO ] 2019-07-10T01:34:55,271Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-013449.586/nodes/0/cordapps] {}
[INFO ] 2019-07-10T01:34:55,277Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013449.586/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T01:34:55,306Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013449.586/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T01:34:55,380Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T01:34:56,104Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T01:34:56,194Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:34:56,195Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:34:56,359Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T01:34:49.441Z
      epoch=1
  } {}
[INFO ] 2019-07-10T01:35:00,219Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T01:35:00,231Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-013449.586/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T01:35:00,232Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T01:35:00,234Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T01:35:00,301Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:00,305Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:02,060Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:02,656Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T01:35:02,703Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T01:35:02,720Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T01:35:02,720Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T01:35:03,061Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T01:35:03,069Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T01:35:03,069Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722503069) {}
[INFO ] 2019-07-10T01:35:03,073Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:03,219Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722503069) {}
[INFO ] 2019-07-10T01:35:03,277Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T01:35:03,291Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722503069) {}
[INFO ] 2019-07-10T01:35:03,317Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:03,353Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=64FEF25EC5F8E0513D4E4C250F2D1A440BA418A7260BDB48391FEE417CDCC19B uploader=app filename=null {}
[INFO ] 2019-07-10T01:35:03,356Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-10T01:35:03,358Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-10T01:35:03,693Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722503069) {}
[INFO ] 2019-07-10T01:35:03,711Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722503069) {}
[INFO ] 2019-07-10T01:35:03,713Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:03,713Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722503069) {}
[INFO ] 2019-07-10T01:35:03,713Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:03,716Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-013449.586/nodes/1/cordapps] {}
[INFO ] 2019-07-10T01:35:03,717Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013449.586/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T01:35:03,717Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013449.586/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T01:35:03,738Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T01:35:03,744Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T01:35:03,770Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:35:03,770Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:35:03,774Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T01:34:49.441Z
      epoch=1
  } {}
[INFO ] 2019-07-10T01:35:04,263Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T01:35:04,267Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-013449.586/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T01:35:04,268Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T01:35:04,269Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T01:35:04,272Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:04,272Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:04,345Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:04,359Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T01:35:04,364Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T01:35:04,365Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-10T01:35:04,398Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:04,399Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:04,535Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:04,539Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T01:35:04,539Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722504539) {}
[INFO ] 2019-07-10T01:35:04,541Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:04,548Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722504539) {}
[INFO ] 2019-07-10T01:35:04,559Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T01:35:04,563Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722504539) {}
[INFO ] 2019-07-10T01:35:04,569Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:04,616Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=64FEF25EC5F8E0513D4E4C250F2D1A440BA418A7260BDB48391FEE417CDCC19B uploader=app filename=null {}
[INFO ] 2019-07-10T01:35:04,636Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722504539) {}
[INFO ] 2019-07-10T01:35:04,643Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722503069) {}
[INFO ] 2019-07-10T01:35:04,645Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:04,661Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722504539) {}
[INFO ] 2019-07-10T01:35:04,663Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:04,673Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722504539) {}
[INFO ] 2019-07-10T01:35:04,673Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:04,673Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722504539) {}
[INFO ] 2019-07-10T01:35:04,673Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:04,675Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-013449.586/nodes/2/cordapps] {}
[INFO ] 2019-07-10T01:35:04,676Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013449.586/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T01:35:04,676Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013449.586/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T01:35:04,698Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T01:35:04,704Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T01:35:04,723Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:35:04,723Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:35:04,726Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T01:34:49.441Z
      epoch=1
  } {}
[INFO ] 2019-07-10T01:35:05,125Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T01:35:05,126Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-013449.586/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T01:35:05,126Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T01:35:05,128Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T01:35:05,129Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:05,129Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:05,238Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:05,253Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T01:35:05,260Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T01:35:05,260Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-10T01:35:05,284Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:05,285Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:05,422Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:05,432Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T01:35:05,432Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722505432) {}
[INFO ] 2019-07-10T01:35:05,436Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:05,450Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722505432) {}
[INFO ] 2019-07-10T01:35:05,468Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T01:35:05,473Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722505432) {}
[INFO ] 2019-07-10T01:35:05,486Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:05,528Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=64FEF25EC5F8E0513D4E4C250F2D1A440BA418A7260BDB48391FEE417CDCC19B uploader=app filename=null {}
[INFO ] 2019-07-10T01:35:05,539Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722505432) {}
[INFO ] 2019-07-10T01:35:05,541Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722503069) {}
[INFO ] 2019-07-10T01:35:05,542Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:05,552Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722505432) {}
[INFO ] 2019-07-10T01:35:05,553Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:05,562Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722504539) {}
[INFO ] 2019-07-10T01:35:05,563Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:05,571Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722505432) {}
[INFO ] 2019-07-10T01:35:05,572Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:05,579Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722505432) {}
[INFO ] 2019-07-10T01:35:05,580Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:05,580Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722505432) {}
[INFO ] 2019-07-10T01:35:05,580Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2019-07-10T01:35:05,844Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f8e94e6b-7f46-4277-baa0-bf4943402ccd, invocation_id=38ebf5af-3e83-42e7-8809-bfdb151574d0, invocation_timestamp=2019-07-10T01:35:05.602Z, origin=Only For Testing, session_id=38ebf5af-3e83-42e7-8809-bfdb151574d0, session_timestamp=2019-07-10T01:35:05.602Z, thread-id=182}
[WARN ] 2019-07-10T01:35:05,844Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f8e94e6b-7f46-4277-baa0-bf4943402ccd, invocation_id=38ebf5af-3e83-42e7-8809-bfdb151574d0, invocation_timestamp=2019-07-10T01:35:05.602Z, origin=Only For Testing, session_id=38ebf5af-3e83-42e7-8809-bfdb151574d0, session_timestamp=2019-07-10T01:35:05.602Z, thread-id=182}
[WARN ] 2019-07-10T01:35:06,682Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f8e94e6b-7f46-4277-baa0-bf4943402ccd, invocation_id=38ebf5af-3e83-42e7-8809-bfdb151574d0, invocation_timestamp=2019-07-10T01:35:05.602Z, origin=Only For Testing, session_id=38ebf5af-3e83-42e7-8809-bfdb151574d0, session_timestamp=2019-07-10T01:35:05.602Z, thread-id=182}
[INFO ] 2019-07-10T01:35:06,832Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=1df0c997-d94b-46e9-a14e-fe76817eb7de, invocation_id=8d05dc2c-cda5-4252-af44-998e648a9ba2, invocation_timestamp=2019-07-10T01:35:06.783Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8d05dc2c-cda5-4252-af44-998e648a9ba2, session_timestamp=2019-07-10T01:35:06.783Z, thread-id=182, tx_id=F2F19360497B5C856C6470A87F446BA9D363E60B97291B83E90111EF43D42237}
[WARN ] 2019-07-10T01:35:06,841Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=1df0c997-d94b-46e9-a14e-fe76817eb7de, invocation_id=8d05dc2c-cda5-4252-af44-998e648a9ba2, invocation_timestamp=2019-07-10T01:35:06.783Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8d05dc2c-cda5-4252-af44-998e648a9ba2, session_timestamp=2019-07-10T01:35:06.783Z, thread-id=182, tx_id=F2F19360497B5C856C6470A87F446BA9D363E60B97291B83E90111EF43D42237}
[INFO ] 2019-07-10T01:35:06,870Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=1df0c997-d94b-46e9-a14e-fe76817eb7de, invocation_id=8d05dc2c-cda5-4252-af44-998e648a9ba2, invocation_timestamp=2019-07-10T01:35:06.783Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8d05dc2c-cda5-4252-af44-998e648a9ba2, session_timestamp=2019-07-10T01:35:06.783Z, thread-id=182, tx_id=F2F19360497B5C856C6470A87F446BA9D363E60B97291B83E90111EF43D42237}
[WARN ] 2019-07-10T01:35:06,924Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=1df0c997-d94b-46e9-a14e-fe76817eb7de, invocation_id=8d05dc2c-cda5-4252-af44-998e648a9ba2, invocation_timestamp=2019-07-10T01:35:06.783Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8d05dc2c-cda5-4252-af44-998e648a9ba2, session_timestamp=2019-07-10T01:35:06.783Z, thread-id=182, tx_id=F2F19360497B5C856C6470A87F446BA9D363E60B97291B83E90111EF43D42237}
[INFO ] 2019-07-10T01:35:06,947Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f8e94e6b-7f46-4277-baa0-bf4943402ccd, invocation_id=38ebf5af-3e83-42e7-8809-bfdb151574d0, invocation_timestamp=2019-07-10T01:35:05.602Z, origin=Only For Testing, session_id=38ebf5af-3e83-42e7-8809-bfdb151574d0, session_timestamp=2019-07-10T01:35:05.602Z, thread-id=182, tx_id=F2F19360497B5C856C6470A87F446BA9D363E60B97291B83E90111EF43D42237}
[INFO ] 2019-07-10T01:35:06,947Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f8e94e6b-7f46-4277-baa0-bf4943402ccd, invocation_id=38ebf5af-3e83-42e7-8809-bfdb151574d0, invocation_timestamp=2019-07-10T01:35:05.602Z, origin=Only For Testing, session_id=38ebf5af-3e83-42e7-8809-bfdb151574d0, session_timestamp=2019-07-10T01:35:05.602Z, thread-id=182, tx_id=F2F19360497B5C856C6470A87F446BA9D363E60B97291B83E90111EF43D42237}
[INFO ] 2019-07-10T01:35:06,978Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f8e94e6b-7f46-4277-baa0-bf4943402ccd, invocation_id=38ebf5af-3e83-42e7-8809-bfdb151574d0, invocation_timestamp=2019-07-10T01:35:05.602Z, origin=Only For Testing, session_id=38ebf5af-3e83-42e7-8809-bfdb151574d0, session_timestamp=2019-07-10T01:35:05.602Z, thread-id=182, tx_id=F2F19360497B5C856C6470A87F446BA9D363E60B97291B83E90111EF43D42237}
[INFO ] 2019-07-10T01:35:07,000Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=1df0c997-d94b-46e9-a14e-fe76817eb7de, invocation_id=8d05dc2c-cda5-4252-af44-998e648a9ba2, invocation_timestamp=2019-07-10T01:35:06.783Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8d05dc2c-cda5-4252-af44-998e648a9ba2, session_timestamp=2019-07-10T01:35:06.783Z, thread-id=182, tx_id=F2F19360497B5C856C6470A87F446BA9D363E60B97291B83E90111EF43D42237}
[WARN ] 2019-07-10T01:35:07,000Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=1df0c997-d94b-46e9-a14e-fe76817eb7de, invocation_id=8d05dc2c-cda5-4252-af44-998e648a9ba2, invocation_timestamp=2019-07-10T01:35:06.783Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8d05dc2c-cda5-4252-af44-998e648a9ba2, session_timestamp=2019-07-10T01:35:06.783Z, thread-id=182, tx_id=F2F19360497B5C856C6470A87F446BA9D363E60B97291B83E90111EF43D42237}
[INFO ] 2019-07-10T01:35:07,007Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=1df0c997-d94b-46e9-a14e-fe76817eb7de, invocation_id=8d05dc2c-cda5-4252-af44-998e648a9ba2, invocation_timestamp=2019-07-10T01:35:06.783Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8d05dc2c-cda5-4252-af44-998e648a9ba2, session_timestamp=2019-07-10T01:35:06.783Z, thread-id=182, tx_id=F2F19360497B5C856C6470A87F446BA9D363E60B97291B83E90111EF43D42237}
[INFO ] 2019-07-10T01:35:07,011Z [Mock network] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000002, flow-id=1df0c997-d94b-46e9-a14e-fe76817eb7de, invocation_id=8d05dc2c-cda5-4252-af44-998e648a9ba2, invocation_timestamp=2019-07-10T01:35:06.783Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8d05dc2c-cda5-4252-af44-998e648a9ba2, session_timestamp=2019-07-10T01:35:06.783Z, thread-id=182, tx_id=F2F19360497B5C856C6470A87F446BA9D363E60B97291B83E90111EF43D42237}
[INFO ] 2019-07-10T01:35:07,016Z [Mock network] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000002, flow-id=1df0c997-d94b-46e9-a14e-fe76817eb7de, invocation_id=8d05dc2c-cda5-4252-af44-998e648a9ba2, invocation_timestamp=2019-07-10T01:35:06.783Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8d05dc2c-cda5-4252-af44-998e648a9ba2, session_timestamp=2019-07-10T01:35:06.783Z, thread-id=182, tx_id=F2F19360497B5C856C6470A87F446BA9D363E60B97291B83E90111EF43D42237}
[INFO ] 2019-07-10T01:35:07,042Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f8e94e6b-7f46-4277-baa0-bf4943402ccd, invocation_id=38ebf5af-3e83-42e7-8809-bfdb151574d0, invocation_timestamp=2019-07-10T01:35:05.602Z, origin=Only For Testing, session_id=38ebf5af-3e83-42e7-8809-bfdb151574d0, session_timestamp=2019-07-10T01:35:05.602Z, thread-id=182, tx_id=F2F19360497B5C856C6470A87F446BA9D363E60B97291B83E90111EF43D42237}
[INFO ] 2019-07-10T01:35:07,042Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f8e94e6b-7f46-4277-baa0-bf4943402ccd, invocation_id=38ebf5af-3e83-42e7-8809-bfdb151574d0, invocation_timestamp=2019-07-10T01:35:05.602Z, origin=Only For Testing, session_id=38ebf5af-3e83-42e7-8809-bfdb151574d0, session_timestamp=2019-07-10T01:35:05.602Z, thread-id=182, tx_id=F2F19360497B5C856C6470A87F446BA9D363E60B97291B83E90111EF43D42237}
[INFO ] 2019-07-10T01:35:07,123Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-013507.063/nodes/0/cordapps] {}
[INFO ] 2019-07-10T01:35:07,124Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013507.063/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T01:35:07,125Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013507.063/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T01:35:07,155Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T01:35:07,169Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T01:35:07,174Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:35:07,174Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:35:07,180Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T01:35:07.063Z
      epoch=1
  } {}
[INFO ] 2019-07-10T01:35:07,620Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T01:35:07,623Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-013507.063/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T01:35:07,623Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T01:35:07,625Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T01:35:07,628Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:07,629Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:07,720Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:07,727Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T01:35:07,746Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T01:35:07,751Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T01:35:07,752Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T01:35:07,903Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T01:35:07,907Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T01:35:07,907Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722507907) {}
[INFO ] 2019-07-10T01:35:07,909Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:07,928Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722507907) {}
[INFO ] 2019-07-10T01:35:07,936Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T01:35:07,939Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722507907) {}
[INFO ] 2019-07-10T01:35:07,943Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:07,982Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=64FEF25EC5F8E0513D4E4C250F2D1A440BA418A7260BDB48391FEE417CDCC19B uploader=app filename=null {}
[INFO ] 2019-07-10T01:35:07,984Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-10T01:35:07,984Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-10T01:35:07,995Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722507907) {}
[INFO ] 2019-07-10T01:35:07,998Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722507907) {}
[INFO ] 2019-07-10T01:35:07,998Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:07,998Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722507907) {}
[INFO ] 2019-07-10T01:35:07,999Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:08,004Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-013507.063/nodes/1/cordapps] {}
[INFO ] 2019-07-10T01:35:08,006Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013507.063/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T01:35:08,007Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013507.063/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T01:35:08,031Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T01:35:08,046Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T01:35:08,082Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:35:08,082Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:35:08,085Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T01:35:07.063Z
      epoch=1
  } {}
[INFO ] 2019-07-10T01:35:08,450Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T01:35:08,453Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-013507.063/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T01:35:08,453Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T01:35:08,454Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T01:35:08,455Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:08,455Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:08,511Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:08,525Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T01:35:08,531Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T01:35:08,531Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-10T01:35:08,552Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:08,553Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:08,687Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:08,690Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T01:35:08,690Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722508690) {}
[INFO ] 2019-07-10T01:35:08,692Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:08,696Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722508690) {}
[INFO ] 2019-07-10T01:35:08,702Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T01:35:08,704Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722508690) {}
[INFO ] 2019-07-10T01:35:08,713Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:08,759Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=64FEF25EC5F8E0513D4E4C250F2D1A440BA418A7260BDB48391FEE417CDCC19B uploader=app filename=null {}
[INFO ] 2019-07-10T01:35:08,773Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722508690) {}
[INFO ] 2019-07-10T01:35:08,776Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722507907) {}
[INFO ] 2019-07-10T01:35:08,781Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:08,797Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722508690) {}
[INFO ] 2019-07-10T01:35:08,798Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:08,819Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722508690) {}
[INFO ] 2019-07-10T01:35:08,819Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:08,819Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722508690) {}
[INFO ] 2019-07-10T01:35:08,819Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:08,823Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-013507.063/nodes/2/cordapps] {}
[INFO ] 2019-07-10T01:35:08,824Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013507.063/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T01:35:08,824Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013507.063/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T01:35:08,852Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T01:35:08,858Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T01:35:08,877Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:35:08,877Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:35:08,879Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T01:35:07.063Z
      epoch=1
  } {}
[INFO ] 2019-07-10T01:35:09,196Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T01:35:09,197Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-013507.063/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T01:35:09,197Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T01:35:09,198Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T01:35:09,200Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:09,200Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:09,261Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:09,273Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T01:35:09,275Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T01:35:09,275Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-10T01:35:09,299Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:09,299Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:09,439Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:09,443Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T01:35:09,443Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722509443) {}
[INFO ] 2019-07-10T01:35:09,444Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:09,449Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722509443) {}
[INFO ] 2019-07-10T01:35:09,453Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T01:35:09,455Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722509443) {}
[INFO ] 2019-07-10T01:35:09,460Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:09,500Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=64FEF25EC5F8E0513D4E4C250F2D1A440BA418A7260BDB48391FEE417CDCC19B uploader=app filename=null {}
[INFO ] 2019-07-10T01:35:09,519Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722509443) {}
[INFO ] 2019-07-10T01:35:09,524Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722507907) {}
[INFO ] 2019-07-10T01:35:09,528Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:09,545Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722509443) {}
[INFO ] 2019-07-10T01:35:09,547Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:09,569Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722508690) {}
[INFO ] 2019-07-10T01:35:09,572Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:09,584Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722509443) {}
[INFO ] 2019-07-10T01:35:09,586Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:09,594Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722509443) {}
[INFO ] 2019-07-10T01:35:09,594Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:09,594Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722509443) {}
[INFO ] 2019-07-10T01:35:09,594Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2019-07-10T01:35:10,281Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=913068af-095d-4fa2-ac9b-c866b987fb67, invocation_id=d20614a6-9159-43a4-a880-2fd457ccf43f, invocation_timestamp=2019-07-10T01:35:09.595Z, origin=Only For Testing, session_id=d20614a6-9159-43a4-a880-2fd457ccf43f, session_timestamp=2019-07-10T01:35:09.595Z, thread-id=350}
[INFO ] 2019-07-10T01:35:10,318Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000004, flow-id=75b3747d-c65a-4b6d-96c2-da6c407e1878, invocation_id=53cd0d72-6c16-4bc0-9ad9-f3281a1f02ed, invocation_timestamp=2019-07-10T01:35:10.299Z, origin=O=Mock Company 1, L=London, C=GB, session_id=53cd0d72-6c16-4bc0-9ad9-f3281a1f02ed, session_timestamp=2019-07-10T01:35:10.299Z, thread-id=350, tx_id=4730D4EB68C4C78EDE9197D9829D1FA18D369D79E8E742E4C52CCF59BB6C72D7}
[WARN ] 2019-07-10T01:35:10,318Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000004, flow-id=75b3747d-c65a-4b6d-96c2-da6c407e1878, invocation_id=53cd0d72-6c16-4bc0-9ad9-f3281a1f02ed, invocation_timestamp=2019-07-10T01:35:10.299Z, origin=O=Mock Company 1, L=London, C=GB, session_id=53cd0d72-6c16-4bc0-9ad9-f3281a1f02ed, session_timestamp=2019-07-10T01:35:10.299Z, thread-id=350, tx_id=4730D4EB68C4C78EDE9197D9829D1FA18D369D79E8E742E4C52CCF59BB6C72D7}
[INFO ] 2019-07-10T01:35:10,326Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000004, flow-id=75b3747d-c65a-4b6d-96c2-da6c407e1878, invocation_id=53cd0d72-6c16-4bc0-9ad9-f3281a1f02ed, invocation_timestamp=2019-07-10T01:35:10.299Z, origin=O=Mock Company 1, L=London, C=GB, session_id=53cd0d72-6c16-4bc0-9ad9-f3281a1f02ed, session_timestamp=2019-07-10T01:35:10.299Z, thread-id=350, tx_id=4730D4EB68C4C78EDE9197D9829D1FA18D369D79E8E742E4C52CCF59BB6C72D7}
[WARN ] 2019-07-10T01:35:10,352Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000004, flow-id=75b3747d-c65a-4b6d-96c2-da6c407e1878, invocation_id=53cd0d72-6c16-4bc0-9ad9-f3281a1f02ed, invocation_timestamp=2019-07-10T01:35:10.299Z, origin=O=Mock Company 1, L=London, C=GB, session_id=53cd0d72-6c16-4bc0-9ad9-f3281a1f02ed, session_timestamp=2019-07-10T01:35:10.299Z, thread-id=350, tx_id=4730D4EB68C4C78EDE9197D9829D1FA18D369D79E8E742E4C52CCF59BB6C72D7}
[INFO ] 2019-07-10T01:35:10,362Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=913068af-095d-4fa2-ac9b-c866b987fb67, invocation_id=d20614a6-9159-43a4-a880-2fd457ccf43f, invocation_timestamp=2019-07-10T01:35:09.595Z, origin=Only For Testing, session_id=d20614a6-9159-43a4-a880-2fd457ccf43f, session_timestamp=2019-07-10T01:35:09.595Z, thread-id=350, tx_id=4730D4EB68C4C78EDE9197D9829D1FA18D369D79E8E742E4C52CCF59BB6C72D7}
[INFO ] 2019-07-10T01:35:10,362Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=913068af-095d-4fa2-ac9b-c866b987fb67, invocation_id=d20614a6-9159-43a4-a880-2fd457ccf43f, invocation_timestamp=2019-07-10T01:35:09.595Z, origin=Only For Testing, session_id=d20614a6-9159-43a4-a880-2fd457ccf43f, session_timestamp=2019-07-10T01:35:09.595Z, thread-id=350, tx_id=4730D4EB68C4C78EDE9197D9829D1FA18D369D79E8E742E4C52CCF59BB6C72D7}
[INFO ] 2019-07-10T01:35:10,373Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=913068af-095d-4fa2-ac9b-c866b987fb67, invocation_id=d20614a6-9159-43a4-a880-2fd457ccf43f, invocation_timestamp=2019-07-10T01:35:09.595Z, origin=Only For Testing, session_id=d20614a6-9159-43a4-a880-2fd457ccf43f, session_timestamp=2019-07-10T01:35:09.595Z, thread-id=350, tx_id=4730D4EB68C4C78EDE9197D9829D1FA18D369D79E8E742E4C52CCF59BB6C72D7}
[INFO ] 2019-07-10T01:35:10,381Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000004, flow-id=75b3747d-c65a-4b6d-96c2-da6c407e1878, invocation_id=53cd0d72-6c16-4bc0-9ad9-f3281a1f02ed, invocation_timestamp=2019-07-10T01:35:10.299Z, origin=O=Mock Company 1, L=London, C=GB, session_id=53cd0d72-6c16-4bc0-9ad9-f3281a1f02ed, session_timestamp=2019-07-10T01:35:10.299Z, thread-id=350, tx_id=4730D4EB68C4C78EDE9197D9829D1FA18D369D79E8E742E4C52CCF59BB6C72D7}
[WARN ] 2019-07-10T01:35:10,381Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000004, flow-id=75b3747d-c65a-4b6d-96c2-da6c407e1878, invocation_id=53cd0d72-6c16-4bc0-9ad9-f3281a1f02ed, invocation_timestamp=2019-07-10T01:35:10.299Z, origin=O=Mock Company 1, L=London, C=GB, session_id=53cd0d72-6c16-4bc0-9ad9-f3281a1f02ed, session_timestamp=2019-07-10T01:35:10.299Z, thread-id=350, tx_id=4730D4EB68C4C78EDE9197D9829D1FA18D369D79E8E742E4C52CCF59BB6C72D7}
[INFO ] 2019-07-10T01:35:10,385Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000004, flow-id=75b3747d-c65a-4b6d-96c2-da6c407e1878, invocation_id=53cd0d72-6c16-4bc0-9ad9-f3281a1f02ed, invocation_timestamp=2019-07-10T01:35:10.299Z, origin=O=Mock Company 1, L=London, C=GB, session_id=53cd0d72-6c16-4bc0-9ad9-f3281a1f02ed, session_timestamp=2019-07-10T01:35:10.299Z, thread-id=350, tx_id=4730D4EB68C4C78EDE9197D9829D1FA18D369D79E8E742E4C52CCF59BB6C72D7}
[INFO ] 2019-07-10T01:35:10,389Z [Mock network] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000004, flow-id=75b3747d-c65a-4b6d-96c2-da6c407e1878, invocation_id=53cd0d72-6c16-4bc0-9ad9-f3281a1f02ed, invocation_timestamp=2019-07-10T01:35:10.299Z, origin=O=Mock Company 1, L=London, C=GB, session_id=53cd0d72-6c16-4bc0-9ad9-f3281a1f02ed, session_timestamp=2019-07-10T01:35:10.299Z, thread-id=350, tx_id=4730D4EB68C4C78EDE9197D9829D1FA18D369D79E8E742E4C52CCF59BB6C72D7}
[INFO ] 2019-07-10T01:35:10,393Z [Mock network] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000004, flow-id=75b3747d-c65a-4b6d-96c2-da6c407e1878, invocation_id=53cd0d72-6c16-4bc0-9ad9-f3281a1f02ed, invocation_timestamp=2019-07-10T01:35:10.299Z, origin=O=Mock Company 1, L=London, C=GB, session_id=53cd0d72-6c16-4bc0-9ad9-f3281a1f02ed, session_timestamp=2019-07-10T01:35:10.299Z, thread-id=350, tx_id=4730D4EB68C4C78EDE9197D9829D1FA18D369D79E8E742E4C52CCF59BB6C72D7}
[INFO ] 2019-07-10T01:35:10,399Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=913068af-095d-4fa2-ac9b-c866b987fb67, invocation_id=d20614a6-9159-43a4-a880-2fd457ccf43f, invocation_timestamp=2019-07-10T01:35:09.595Z, origin=Only For Testing, session_id=d20614a6-9159-43a4-a880-2fd457ccf43f, session_timestamp=2019-07-10T01:35:09.595Z, thread-id=350, tx_id=4730D4EB68C4C78EDE9197D9829D1FA18D369D79E8E742E4C52CCF59BB6C72D7}
[INFO ] 2019-07-10T01:35:10,399Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=913068af-095d-4fa2-ac9b-c866b987fb67, invocation_id=d20614a6-9159-43a4-a880-2fd457ccf43f, invocation_timestamp=2019-07-10T01:35:09.595Z, origin=Only For Testing, session_id=d20614a6-9159-43a4-a880-2fd457ccf43f, session_timestamp=2019-07-10T01:35:09.595Z, thread-id=350, tx_id=4730D4EB68C4C78EDE9197D9829D1FA18D369D79E8E742E4C52CCF59BB6C72D7}
[INFO ] 2019-07-10T01:35:10,480Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-013510.412/nodes/0/cordapps] {}
[INFO ] 2019-07-10T01:35:10,480Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013510.412/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T01:35:10,480Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013510.412/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T01:35:10,503Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T01:35:10,507Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T01:35:10,510Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:35:10,510Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:35:10,515Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T01:35:10.412Z
      epoch=1
  } {}
[INFO ] 2019-07-10T01:35:10,860Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T01:35:10,861Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-013510.412/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T01:35:10,861Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T01:35:10,862Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T01:35:10,864Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:10,864Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:10,961Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:10,980Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T01:35:11,014Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T01:35:11,021Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T01:35:11,021Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T01:35:11,132Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T01:35:11,139Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T01:35:11,139Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722511139) {}
[INFO ] 2019-07-10T01:35:11,143Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:11,173Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722511139) {}
[INFO ] 2019-07-10T01:35:11,193Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T01:35:11,196Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722511139) {}
[INFO ] 2019-07-10T01:35:11,200Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:11,236Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=64FEF25EC5F8E0513D4E4C250F2D1A440BA418A7260BDB48391FEE417CDCC19B uploader=app filename=null {}
[INFO ] 2019-07-10T01:35:11,238Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-10T01:35:11,238Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-10T01:35:11,242Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722511139) {}
[INFO ] 2019-07-10T01:35:11,244Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722511139) {}
[INFO ] 2019-07-10T01:35:11,244Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:11,244Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722511139) {}
[INFO ] 2019-07-10T01:35:11,244Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:11,246Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-013510.412/nodes/1/cordapps] {}
[INFO ] 2019-07-10T01:35:11,246Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013510.412/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T01:35:11,246Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013510.412/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T01:35:11,269Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T01:35:11,274Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T01:35:11,313Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:35:11,314Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:35:11,321Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T01:35:10.412Z
      epoch=1
  } {}
[INFO ] 2019-07-10T01:35:11,676Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T01:35:11,678Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-013510.412/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T01:35:11,678Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T01:35:11,678Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T01:35:11,680Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:11,680Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:11,756Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:11,775Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T01:35:11,779Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T01:35:11,780Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-10T01:35:11,802Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:11,802Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:11,886Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:11,891Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T01:35:11,891Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722511891) {}
[INFO ] 2019-07-10T01:35:11,892Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:11,897Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722511891) {}
[INFO ] 2019-07-10T01:35:11,901Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T01:35:11,904Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722511891) {}
[INFO ] 2019-07-10T01:35:11,907Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:11,938Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=64FEF25EC5F8E0513D4E4C250F2D1A440BA418A7260BDB48391FEE417CDCC19B uploader=app filename=null {}
[INFO ] 2019-07-10T01:35:11,947Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722511891) {}
[INFO ] 2019-07-10T01:35:11,951Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722511139) {}
[INFO ] 2019-07-10T01:35:11,952Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:11,964Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722511891) {}
[INFO ] 2019-07-10T01:35:11,966Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:11,980Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722511891) {}
[INFO ] 2019-07-10T01:35:11,980Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:11,980Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722511891) {}
[INFO ] 2019-07-10T01:35:11,980Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:11,987Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-013510.412/nodes/2/cordapps] {}
[INFO ] 2019-07-10T01:35:11,987Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013510.412/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T01:35:11,987Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013510.412/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T01:35:12,017Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T01:35:12,026Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T01:35:12,051Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:35:12,051Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:35:12,053Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T01:35:10.412Z
      epoch=1
  } {}
[INFO ] 2019-07-10T01:35:12,345Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T01:35:12,346Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-013510.412/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T01:35:12,346Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T01:35:12,347Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T01:35:12,348Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:12,348Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:12,395Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:12,400Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T01:35:12,401Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T01:35:12,401Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-10T01:35:12,413Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:12,413Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:12,546Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:12,552Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T01:35:12,552Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722512552) {}
[INFO ] 2019-07-10T01:35:12,553Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:12,560Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722512552) {}
[INFO ] 2019-07-10T01:35:12,564Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T01:35:12,567Z [MockNode-9-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722512552) {}
[INFO ] 2019-07-10T01:35:12,570Z [MockNode-9-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:12,599Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=64FEF25EC5F8E0513D4E4C250F2D1A440BA418A7260BDB48391FEE417CDCC19B uploader=app filename=null {}
[INFO ] 2019-07-10T01:35:12,603Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722512552) {}
[INFO ] 2019-07-10T01:35:12,605Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722511139) {}
[INFO ] 2019-07-10T01:35:12,606Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:12,616Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722512552) {}
[INFO ] 2019-07-10T01:35:12,617Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:12,625Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722511891) {}
[INFO ] 2019-07-10T01:35:12,627Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:12,645Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722512552) {}
[INFO ] 2019-07-10T01:35:12,646Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:12,661Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722512552) {}
[INFO ] 2019-07-10T01:35:12,661Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:12,661Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722512552) {}
[INFO ] 2019-07-10T01:35:12,661Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2019-07-10T01:35:13,252Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=25bbfad0-13fc-4dc9-a3df-6b6d339a53fc, invocation_id=0f1039b9-2eb3-45c6-b3be-3af71bd38aa4, invocation_timestamp=2019-07-10T01:35:12.662Z, origin=Only For Testing, session_id=0f1039b9-2eb3-45c6-b3be-3af71bd38aa4, session_timestamp=2019-07-10T01:35:12.662Z, thread-id=516}
[INFO ] 2019-07-10T01:35:13,278Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000006, flow-id=e25c998a-6b2c-47d0-8770-729242a318c6, invocation_id=9e690c03-5ef1-47aa-8130-6393a778a8db, invocation_timestamp=2019-07-10T01:35:13.267Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9e690c03-5ef1-47aa-8130-6393a778a8db, session_timestamp=2019-07-10T01:35:13.267Z, thread-id=516, tx_id=18BBA396EEC18F67B3101305351BA2AEF3E375D330AF7E75D16160457610301F}
[WARN ] 2019-07-10T01:35:13,278Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000006, flow-id=e25c998a-6b2c-47d0-8770-729242a318c6, invocation_id=9e690c03-5ef1-47aa-8130-6393a778a8db, invocation_timestamp=2019-07-10T01:35:13.267Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9e690c03-5ef1-47aa-8130-6393a778a8db, session_timestamp=2019-07-10T01:35:13.267Z, thread-id=516, tx_id=18BBA396EEC18F67B3101305351BA2AEF3E375D330AF7E75D16160457610301F}
[INFO ] 2019-07-10T01:35:13,285Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000006, flow-id=e25c998a-6b2c-47d0-8770-729242a318c6, invocation_id=9e690c03-5ef1-47aa-8130-6393a778a8db, invocation_timestamp=2019-07-10T01:35:13.267Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9e690c03-5ef1-47aa-8130-6393a778a8db, session_timestamp=2019-07-10T01:35:13.267Z, thread-id=516, tx_id=18BBA396EEC18F67B3101305351BA2AEF3E375D330AF7E75D16160457610301F}
[WARN ] 2019-07-10T01:35:13,307Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000006, flow-id=e25c998a-6b2c-47d0-8770-729242a318c6, invocation_id=9e690c03-5ef1-47aa-8130-6393a778a8db, invocation_timestamp=2019-07-10T01:35:13.267Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9e690c03-5ef1-47aa-8130-6393a778a8db, session_timestamp=2019-07-10T01:35:13.267Z, thread-id=516, tx_id=18BBA396EEC18F67B3101305351BA2AEF3E375D330AF7E75D16160457610301F}
[INFO ] 2019-07-10T01:35:13,315Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=25bbfad0-13fc-4dc9-a3df-6b6d339a53fc, invocation_id=0f1039b9-2eb3-45c6-b3be-3af71bd38aa4, invocation_timestamp=2019-07-10T01:35:12.662Z, origin=Only For Testing, session_id=0f1039b9-2eb3-45c6-b3be-3af71bd38aa4, session_timestamp=2019-07-10T01:35:12.662Z, thread-id=516, tx_id=18BBA396EEC18F67B3101305351BA2AEF3E375D330AF7E75D16160457610301F}
[INFO ] 2019-07-10T01:35:13,315Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=25bbfad0-13fc-4dc9-a3df-6b6d339a53fc, invocation_id=0f1039b9-2eb3-45c6-b3be-3af71bd38aa4, invocation_timestamp=2019-07-10T01:35:12.662Z, origin=Only For Testing, session_id=0f1039b9-2eb3-45c6-b3be-3af71bd38aa4, session_timestamp=2019-07-10T01:35:12.662Z, thread-id=516, tx_id=18BBA396EEC18F67B3101305351BA2AEF3E375D330AF7E75D16160457610301F}
[INFO ] 2019-07-10T01:35:13,324Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=25bbfad0-13fc-4dc9-a3df-6b6d339a53fc, invocation_id=0f1039b9-2eb3-45c6-b3be-3af71bd38aa4, invocation_timestamp=2019-07-10T01:35:12.662Z, origin=Only For Testing, session_id=0f1039b9-2eb3-45c6-b3be-3af71bd38aa4, session_timestamp=2019-07-10T01:35:12.662Z, thread-id=516, tx_id=18BBA396EEC18F67B3101305351BA2AEF3E375D330AF7E75D16160457610301F}
[INFO ] 2019-07-10T01:35:13,333Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000006, flow-id=e25c998a-6b2c-47d0-8770-729242a318c6, invocation_id=9e690c03-5ef1-47aa-8130-6393a778a8db, invocation_timestamp=2019-07-10T01:35:13.267Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9e690c03-5ef1-47aa-8130-6393a778a8db, session_timestamp=2019-07-10T01:35:13.267Z, thread-id=516, tx_id=18BBA396EEC18F67B3101305351BA2AEF3E375D330AF7E75D16160457610301F}
[WARN ] 2019-07-10T01:35:13,333Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000006, flow-id=e25c998a-6b2c-47d0-8770-729242a318c6, invocation_id=9e690c03-5ef1-47aa-8130-6393a778a8db, invocation_timestamp=2019-07-10T01:35:13.267Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9e690c03-5ef1-47aa-8130-6393a778a8db, session_timestamp=2019-07-10T01:35:13.267Z, thread-id=516, tx_id=18BBA396EEC18F67B3101305351BA2AEF3E375D330AF7E75D16160457610301F}
[INFO ] 2019-07-10T01:35:13,336Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000006, flow-id=e25c998a-6b2c-47d0-8770-729242a318c6, invocation_id=9e690c03-5ef1-47aa-8130-6393a778a8db, invocation_timestamp=2019-07-10T01:35:13.267Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9e690c03-5ef1-47aa-8130-6393a778a8db, session_timestamp=2019-07-10T01:35:13.267Z, thread-id=516, tx_id=18BBA396EEC18F67B3101305351BA2AEF3E375D330AF7E75D16160457610301F}
[INFO ] 2019-07-10T01:35:13,339Z [Mock network] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000006, flow-id=e25c998a-6b2c-47d0-8770-729242a318c6, invocation_id=9e690c03-5ef1-47aa-8130-6393a778a8db, invocation_timestamp=2019-07-10T01:35:13.267Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9e690c03-5ef1-47aa-8130-6393a778a8db, session_timestamp=2019-07-10T01:35:13.267Z, thread-id=516, tx_id=18BBA396EEC18F67B3101305351BA2AEF3E375D330AF7E75D16160457610301F}
[INFO ] 2019-07-10T01:35:13,342Z [Mock network] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000006, flow-id=e25c998a-6b2c-47d0-8770-729242a318c6, invocation_id=9e690c03-5ef1-47aa-8130-6393a778a8db, invocation_timestamp=2019-07-10T01:35:13.267Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9e690c03-5ef1-47aa-8130-6393a778a8db, session_timestamp=2019-07-10T01:35:13.267Z, thread-id=516, tx_id=18BBA396EEC18F67B3101305351BA2AEF3E375D330AF7E75D16160457610301F}
[INFO ] 2019-07-10T01:35:13,347Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=25bbfad0-13fc-4dc9-a3df-6b6d339a53fc, invocation_id=0f1039b9-2eb3-45c6-b3be-3af71bd38aa4, invocation_timestamp=2019-07-10T01:35:12.662Z, origin=Only For Testing, session_id=0f1039b9-2eb3-45c6-b3be-3af71bd38aa4, session_timestamp=2019-07-10T01:35:12.662Z, thread-id=516, tx_id=18BBA396EEC18F67B3101305351BA2AEF3E375D330AF7E75D16160457610301F}
[INFO ] 2019-07-10T01:35:13,347Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=25bbfad0-13fc-4dc9-a3df-6b6d339a53fc, invocation_id=0f1039b9-2eb3-45c6-b3be-3af71bd38aa4, invocation_timestamp=2019-07-10T01:35:12.662Z, origin=Only For Testing, session_id=0f1039b9-2eb3-45c6-b3be-3af71bd38aa4, session_timestamp=2019-07-10T01:35:12.662Z, thread-id=516, tx_id=18BBA396EEC18F67B3101305351BA2AEF3E375D330AF7E75D16160457610301F}
[INFO ] 2019-07-10T01:35:13,406Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-013513.356/nodes/0/cordapps] {}
[INFO ] 2019-07-10T01:35:13,407Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013513.356/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T01:35:13,407Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013513.356/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T01:35:13,429Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T01:35:13,432Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T01:35:13,435Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:35:13,435Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:35:13,439Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T01:35:13.356Z
      epoch=1
  } {}
[INFO ] 2019-07-10T01:35:13,754Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T01:35:13,755Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-013513.356/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T01:35:13,755Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T01:35:13,756Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T01:35:13,758Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:13,758Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:13,810Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:13,815Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T01:35:13,834Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T01:35:13,842Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T01:35:13,842Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T01:35:13,967Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T01:35:13,970Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T01:35:13,970Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722513970) {}
[INFO ] 2019-07-10T01:35:13,971Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:13,979Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722513970) {}
[INFO ] 2019-07-10T01:35:13,985Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T01:35:13,987Z [MockNode-10-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722513970) {}
[INFO ] 2019-07-10T01:35:13,990Z [MockNode-10-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:14,018Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=64FEF25EC5F8E0513D4E4C250F2D1A440BA418A7260BDB48391FEE417CDCC19B uploader=app filename=null {}
[INFO ] 2019-07-10T01:35:14,021Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-10T01:35:14,022Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-10T01:35:14,034Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722513970) {}
[INFO ] 2019-07-10T01:35:14,037Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722513970) {}
[INFO ] 2019-07-10T01:35:14,037Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:14,038Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722513970) {}
[INFO ] 2019-07-10T01:35:14,038Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:14,046Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-013513.356/nodes/1/cordapps] {}
[INFO ] 2019-07-10T01:35:14,047Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013513.356/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T01:35:14,047Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013513.356/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T01:35:14,073Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T01:35:14,084Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T01:35:14,119Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:35:14,120Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:35:14,126Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T01:35:13.356Z
      epoch=1
  } {}
[INFO ] 2019-07-10T01:35:14,417Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T01:35:14,418Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-013513.356/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T01:35:14,418Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T01:35:14,422Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T01:35:14,426Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:14,427Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:14,506Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:14,517Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T01:35:14,519Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T01:35:14,519Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-10T01:35:14,544Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:14,544Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:14,644Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:14,647Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T01:35:14,647Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722514647) {}
[INFO ] 2019-07-10T01:35:14,648Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:14,651Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722514647) {}
[INFO ] 2019-07-10T01:35:14,655Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T01:35:14,657Z [MockNode-11-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722514647) {}
[INFO ] 2019-07-10T01:35:14,659Z [MockNode-11-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:14,687Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=64FEF25EC5F8E0513D4E4C250F2D1A440BA418A7260BDB48391FEE417CDCC19B uploader=app filename=null {}
[INFO ] 2019-07-10T01:35:14,699Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722514647) {}
[INFO ] 2019-07-10T01:35:14,700Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722513970) {}
[INFO ] 2019-07-10T01:35:14,701Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:14,713Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722514647) {}
[INFO ] 2019-07-10T01:35:14,714Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:14,727Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722514647) {}
[INFO ] 2019-07-10T01:35:14,727Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:14,727Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722514647) {}
[INFO ] 2019-07-10T01:35:14,727Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:14,733Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-013513.356/nodes/2/cordapps] {}
[INFO ] 2019-07-10T01:35:14,735Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013513.356/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T01:35:14,735Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013513.356/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T01:35:14,761Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T01:35:14,771Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T01:35:14,799Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:35:14,799Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:35:14,801Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T01:35:13.356Z
      epoch=1
  } {}
[INFO ] 2019-07-10T01:35:15,086Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T01:35:15,087Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-013513.356/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T01:35:15,087Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T01:35:15,088Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T01:35:15,091Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:15,091Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:15,137Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:15,146Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T01:35:15,148Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T01:35:15,148Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-10T01:35:15,168Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:15,168Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:15,288Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:15,291Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T01:35:15,291Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722515291) {}
[INFO ] 2019-07-10T01:35:15,292Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:15,295Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722515291) {}
[INFO ] 2019-07-10T01:35:15,299Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T01:35:15,301Z [MockNode-12-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722515291) {}
[INFO ] 2019-07-10T01:35:15,303Z [MockNode-12-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:15,333Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=64FEF25EC5F8E0513D4E4C250F2D1A440BA418A7260BDB48391FEE417CDCC19B uploader=app filename=null {}
[INFO ] 2019-07-10T01:35:15,336Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722515291) {}
[INFO ] 2019-07-10T01:35:15,338Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722513970) {}
[INFO ] 2019-07-10T01:35:15,338Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:15,347Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722515291) {}
[INFO ] 2019-07-10T01:35:15,348Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:15,358Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722514647) {}
[INFO ] 2019-07-10T01:35:15,360Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:15,373Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722515291) {}
[INFO ] 2019-07-10T01:35:15,375Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:15,385Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722515291) {}
[INFO ] 2019-07-10T01:35:15,385Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:15,385Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722515291) {}
[INFO ] 2019-07-10T01:35:15,385Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2019-07-10T01:35:15,860Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=88cf9742-7029-437c-8052-b2f3ccde2779, invocation_id=acddd99d-8415-459f-9a9f-6b6a3d69b080, invocation_timestamp=2019-07-10T01:35:15.386Z, origin=Only For Testing, session_id=acddd99d-8415-459f-9a9f-6b6a3d69b080, session_timestamp=2019-07-10T01:35:15.386Z, thread-id=682}
[INFO ] 2019-07-10T01:35:15,887Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000008, flow-id=ffecfe1a-8800-47d0-8f4c-9b1762e24d83, invocation_id=9b14b634-e910-4274-8e56-f8d860401b06, invocation_timestamp=2019-07-10T01:35:15.873Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9b14b634-e910-4274-8e56-f8d860401b06, session_timestamp=2019-07-10T01:35:15.873Z, thread-id=682, tx_id=B589631C1C4034942FEA1757D6A6931B76406256A8F363ABF4D38E40E8AAC519}
[WARN ] 2019-07-10T01:35:15,887Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000008, flow-id=ffecfe1a-8800-47d0-8f4c-9b1762e24d83, invocation_id=9b14b634-e910-4274-8e56-f8d860401b06, invocation_timestamp=2019-07-10T01:35:15.873Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9b14b634-e910-4274-8e56-f8d860401b06, session_timestamp=2019-07-10T01:35:15.873Z, thread-id=682, tx_id=B589631C1C4034942FEA1757D6A6931B76406256A8F363ABF4D38E40E8AAC519}
[INFO ] 2019-07-10T01:35:15,895Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000008, flow-id=ffecfe1a-8800-47d0-8f4c-9b1762e24d83, invocation_id=9b14b634-e910-4274-8e56-f8d860401b06, invocation_timestamp=2019-07-10T01:35:15.873Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9b14b634-e910-4274-8e56-f8d860401b06, session_timestamp=2019-07-10T01:35:15.873Z, thread-id=682, tx_id=B589631C1C4034942FEA1757D6A6931B76406256A8F363ABF4D38E40E8AAC519}
[WARN ] 2019-07-10T01:35:15,917Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000008, flow-id=ffecfe1a-8800-47d0-8f4c-9b1762e24d83, invocation_id=9b14b634-e910-4274-8e56-f8d860401b06, invocation_timestamp=2019-07-10T01:35:15.873Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9b14b634-e910-4274-8e56-f8d860401b06, session_timestamp=2019-07-10T01:35:15.873Z, thread-id=682, tx_id=B589631C1C4034942FEA1757D6A6931B76406256A8F363ABF4D38E40E8AAC519}
[INFO ] 2019-07-10T01:35:15,925Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=88cf9742-7029-437c-8052-b2f3ccde2779, invocation_id=acddd99d-8415-459f-9a9f-6b6a3d69b080, invocation_timestamp=2019-07-10T01:35:15.386Z, origin=Only For Testing, session_id=acddd99d-8415-459f-9a9f-6b6a3d69b080, session_timestamp=2019-07-10T01:35:15.386Z, thread-id=682, tx_id=B589631C1C4034942FEA1757D6A6931B76406256A8F363ABF4D38E40E8AAC519}
[INFO ] 2019-07-10T01:35:15,925Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=88cf9742-7029-437c-8052-b2f3ccde2779, invocation_id=acddd99d-8415-459f-9a9f-6b6a3d69b080, invocation_timestamp=2019-07-10T01:35:15.386Z, origin=Only For Testing, session_id=acddd99d-8415-459f-9a9f-6b6a3d69b080, session_timestamp=2019-07-10T01:35:15.386Z, thread-id=682, tx_id=B589631C1C4034942FEA1757D6A6931B76406256A8F363ABF4D38E40E8AAC519}
[INFO ] 2019-07-10T01:35:15,934Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=88cf9742-7029-437c-8052-b2f3ccde2779, invocation_id=acddd99d-8415-459f-9a9f-6b6a3d69b080, invocation_timestamp=2019-07-10T01:35:15.386Z, origin=Only For Testing, session_id=acddd99d-8415-459f-9a9f-6b6a3d69b080, session_timestamp=2019-07-10T01:35:15.386Z, thread-id=682, tx_id=B589631C1C4034942FEA1757D6A6931B76406256A8F363ABF4D38E40E8AAC519}
[INFO ] 2019-07-10T01:35:15,941Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000008, flow-id=ffecfe1a-8800-47d0-8f4c-9b1762e24d83, invocation_id=9b14b634-e910-4274-8e56-f8d860401b06, invocation_timestamp=2019-07-10T01:35:15.873Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9b14b634-e910-4274-8e56-f8d860401b06, session_timestamp=2019-07-10T01:35:15.873Z, thread-id=682, tx_id=B589631C1C4034942FEA1757D6A6931B76406256A8F363ABF4D38E40E8AAC519}
[WARN ] 2019-07-10T01:35:15,941Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000008, flow-id=ffecfe1a-8800-47d0-8f4c-9b1762e24d83, invocation_id=9b14b634-e910-4274-8e56-f8d860401b06, invocation_timestamp=2019-07-10T01:35:15.873Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9b14b634-e910-4274-8e56-f8d860401b06, session_timestamp=2019-07-10T01:35:15.873Z, thread-id=682, tx_id=B589631C1C4034942FEA1757D6A6931B76406256A8F363ABF4D38E40E8AAC519}
[INFO ] 2019-07-10T01:35:15,945Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000008, flow-id=ffecfe1a-8800-47d0-8f4c-9b1762e24d83, invocation_id=9b14b634-e910-4274-8e56-f8d860401b06, invocation_timestamp=2019-07-10T01:35:15.873Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9b14b634-e910-4274-8e56-f8d860401b06, session_timestamp=2019-07-10T01:35:15.873Z, thread-id=682, tx_id=B589631C1C4034942FEA1757D6A6931B76406256A8F363ABF4D38E40E8AAC519}
[INFO ] 2019-07-10T01:35:15,948Z [Mock network] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000008, flow-id=ffecfe1a-8800-47d0-8f4c-9b1762e24d83, invocation_id=9b14b634-e910-4274-8e56-f8d860401b06, invocation_timestamp=2019-07-10T01:35:15.873Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9b14b634-e910-4274-8e56-f8d860401b06, session_timestamp=2019-07-10T01:35:15.873Z, thread-id=682, tx_id=B589631C1C4034942FEA1757D6A6931B76406256A8F363ABF4D38E40E8AAC519}
[INFO ] 2019-07-10T01:35:15,951Z [Mock network] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000008, flow-id=ffecfe1a-8800-47d0-8f4c-9b1762e24d83, invocation_id=9b14b634-e910-4274-8e56-f8d860401b06, invocation_timestamp=2019-07-10T01:35:15.873Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9b14b634-e910-4274-8e56-f8d860401b06, session_timestamp=2019-07-10T01:35:15.873Z, thread-id=682, tx_id=B589631C1C4034942FEA1757D6A6931B76406256A8F363ABF4D38E40E8AAC519}
[INFO ] 2019-07-10T01:35:15,956Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=88cf9742-7029-437c-8052-b2f3ccde2779, invocation_id=acddd99d-8415-459f-9a9f-6b6a3d69b080, invocation_timestamp=2019-07-10T01:35:15.386Z, origin=Only For Testing, session_id=acddd99d-8415-459f-9a9f-6b6a3d69b080, session_timestamp=2019-07-10T01:35:15.386Z, thread-id=682, tx_id=B589631C1C4034942FEA1757D6A6931B76406256A8F363ABF4D38E40E8AAC519}
[INFO ] 2019-07-10T01:35:15,956Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=88cf9742-7029-437c-8052-b2f3ccde2779, invocation_id=acddd99d-8415-459f-9a9f-6b6a3d69b080, invocation_timestamp=2019-07-10T01:35:15.386Z, origin=Only For Testing, session_id=acddd99d-8415-459f-9a9f-6b6a3d69b080, session_timestamp=2019-07-10T01:35:15.386Z, thread-id=682, tx_id=B589631C1C4034942FEA1757D6A6931B76406256A8F363ABF4D38E40E8AAC519}
[INFO ] 2019-07-10T01:35:16,005Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-013515.963/nodes/0/cordapps] {}
[INFO ] 2019-07-10T01:35:16,006Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013515.963/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T01:35:16,006Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013515.963/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T01:35:16,034Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T01:35:16,039Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T01:35:16,043Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:35:16,043Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:35:16,047Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T01:35:15.963Z
      epoch=1
  } {}
[INFO ] 2019-07-10T01:35:16,361Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T01:35:16,362Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-013515.963/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T01:35:16,362Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T01:35:16,363Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T01:35:16,364Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:16,365Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:16,413Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:16,418Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T01:35:16,438Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T01:35:16,444Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T01:35:16,444Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T01:35:16,587Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T01:35:16,591Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T01:35:16,591Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722516591) {}
[INFO ] 2019-07-10T01:35:16,592Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:16,600Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722516591) {}
[INFO ] 2019-07-10T01:35:16,606Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T01:35:16,608Z [MockNode-13-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722516591) {}
[INFO ] 2019-07-10T01:35:16,610Z [MockNode-13-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:16,636Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=64FEF25EC5F8E0513D4E4C250F2D1A440BA418A7260BDB48391FEE417CDCC19B uploader=app filename=null {}
[INFO ] 2019-07-10T01:35:16,637Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-10T01:35:16,637Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-10T01:35:16,640Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722516591) {}
[INFO ] 2019-07-10T01:35:16,641Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722516591) {}
[INFO ] 2019-07-10T01:35:16,641Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:16,641Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722516591) {}
[INFO ] 2019-07-10T01:35:16,641Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:16,643Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-013515.963/nodes/1/cordapps] {}
[INFO ] 2019-07-10T01:35:16,644Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013515.963/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T01:35:16,644Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013515.963/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T01:35:16,671Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T01:35:16,680Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T01:35:16,720Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:35:16,720Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:35:16,724Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T01:35:15.963Z
      epoch=1
  } {}
[INFO ] 2019-07-10T01:35:17,014Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T01:35:17,015Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-013515.963/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T01:35:17,015Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T01:35:17,016Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T01:35:17,017Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:17,018Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:17,059Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:17,069Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T01:35:17,074Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T01:35:17,074Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-10T01:35:17,095Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:17,095Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:17,211Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:17,216Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T01:35:17,216Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722517216) {}
[INFO ] 2019-07-10T01:35:17,217Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:17,220Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722517216) {}
[INFO ] 2019-07-10T01:35:17,224Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T01:35:17,226Z [MockNode-14-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722517216) {}
[INFO ] 2019-07-10T01:35:17,229Z [MockNode-14-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:17,251Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=64FEF25EC5F8E0513D4E4C250F2D1A440BA418A7260BDB48391FEE417CDCC19B uploader=app filename=null {}
[INFO ] 2019-07-10T01:35:17,254Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722517216) {}
[INFO ] 2019-07-10T01:35:17,256Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722516591) {}
[INFO ] 2019-07-10T01:35:17,256Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:17,260Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722517216) {}
[INFO ] 2019-07-10T01:35:17,261Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:17,265Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722517216) {}
[INFO ] 2019-07-10T01:35:17,265Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:17,265Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722517216) {}
[INFO ] 2019-07-10T01:35:17,265Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:17,267Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-013515.963/nodes/2/cordapps] {}
[INFO ] 2019-07-10T01:35:17,268Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013515.963/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T01:35:17,268Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013515.963/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T01:35:17,292Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T01:35:17,300Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T01:35:17,325Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:35:17,325Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:35:17,330Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T01:35:15.963Z
      epoch=1
  } {}
[INFO ] 2019-07-10T01:35:17,628Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T01:35:17,629Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-013515.963/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T01:35:17,629Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T01:35:17,630Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T01:35:17,631Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:17,631Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:17,672Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:17,677Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T01:35:17,678Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T01:35:17,678Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-10T01:35:17,690Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:17,690Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:17,820Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:17,824Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T01:35:17,824Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722517824) {}
[INFO ] 2019-07-10T01:35:17,825Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:17,829Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722517824) {}
[INFO ] 2019-07-10T01:35:17,832Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T01:35:17,834Z [MockNode-15-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722517824) {}
[INFO ] 2019-07-10T01:35:17,837Z [MockNode-15-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:17,866Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=64FEF25EC5F8E0513D4E4C250F2D1A440BA418A7260BDB48391FEE417CDCC19B uploader=app filename=null {}
[INFO ] 2019-07-10T01:35:17,870Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722517824) {}
[INFO ] 2019-07-10T01:35:17,872Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722516591) {}
[INFO ] 2019-07-10T01:35:17,872Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:17,876Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722517824) {}
[INFO ] 2019-07-10T01:35:17,877Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:17,887Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722517216) {}
[INFO ] 2019-07-10T01:35:17,888Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:17,893Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722517824) {}
[INFO ] 2019-07-10T01:35:17,894Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:17,900Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722517824) {}
[INFO ] 2019-07-10T01:35:17,901Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:17,901Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722517824) {}
[INFO ] 2019-07-10T01:35:17,901Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2019-07-10T01:35:18,700Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=ae5bc5b4-ba43-4176-9e04-36ef452d98a8, invocation_id=c3ce822b-8d97-4291-8ae8-19c6c2f78cc3, invocation_timestamp=2019-07-10T01:35:17.901Z, origin=Only For Testing, session_id=c3ce822b-8d97-4291-8ae8-19c6c2f78cc3, session_timestamp=2019-07-10T01:35:17.901Z, thread-id=848}
[INFO ] 2019-07-10T01:35:18,724Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000010, flow-id=a6b5a328-1a3e-4833-918e-f1e4dc81ca34, invocation_id=79c4eb91-ac25-4917-bb37-e29b407a9cac, invocation_timestamp=2019-07-10T01:35:18.715Z, origin=O=Mock Company 1, L=London, C=GB, session_id=79c4eb91-ac25-4917-bb37-e29b407a9cac, session_timestamp=2019-07-10T01:35:18.715Z, thread-id=848, tx_id=A16308B3F19AF5A3A1258E090E246F82EFB62058809D639DD232313634028E46}
[WARN ] 2019-07-10T01:35:18,724Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000010, flow-id=a6b5a328-1a3e-4833-918e-f1e4dc81ca34, invocation_id=79c4eb91-ac25-4917-bb37-e29b407a9cac, invocation_timestamp=2019-07-10T01:35:18.715Z, origin=O=Mock Company 1, L=London, C=GB, session_id=79c4eb91-ac25-4917-bb37-e29b407a9cac, session_timestamp=2019-07-10T01:35:18.715Z, thread-id=848, tx_id=A16308B3F19AF5A3A1258E090E246F82EFB62058809D639DD232313634028E46}
[INFO ] 2019-07-10T01:35:18,729Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000010, flow-id=a6b5a328-1a3e-4833-918e-f1e4dc81ca34, invocation_id=79c4eb91-ac25-4917-bb37-e29b407a9cac, invocation_timestamp=2019-07-10T01:35:18.715Z, origin=O=Mock Company 1, L=London, C=GB, session_id=79c4eb91-ac25-4917-bb37-e29b407a9cac, session_timestamp=2019-07-10T01:35:18.715Z, thread-id=848, tx_id=A16308B3F19AF5A3A1258E090E246F82EFB62058809D639DD232313634028E46}
[WARN ] 2019-07-10T01:35:18,749Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000010, flow-id=a6b5a328-1a3e-4833-918e-f1e4dc81ca34, invocation_id=79c4eb91-ac25-4917-bb37-e29b407a9cac, invocation_timestamp=2019-07-10T01:35:18.715Z, origin=O=Mock Company 1, L=London, C=GB, session_id=79c4eb91-ac25-4917-bb37-e29b407a9cac, session_timestamp=2019-07-10T01:35:18.715Z, thread-id=848, tx_id=A16308B3F19AF5A3A1258E090E246F82EFB62058809D639DD232313634028E46}
[INFO ] 2019-07-10T01:35:18,757Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=ae5bc5b4-ba43-4176-9e04-36ef452d98a8, invocation_id=c3ce822b-8d97-4291-8ae8-19c6c2f78cc3, invocation_timestamp=2019-07-10T01:35:17.901Z, origin=Only For Testing, session_id=c3ce822b-8d97-4291-8ae8-19c6c2f78cc3, session_timestamp=2019-07-10T01:35:17.901Z, thread-id=848, tx_id=A16308B3F19AF5A3A1258E090E246F82EFB62058809D639DD232313634028E46}
[INFO ] 2019-07-10T01:35:18,757Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=ae5bc5b4-ba43-4176-9e04-36ef452d98a8, invocation_id=c3ce822b-8d97-4291-8ae8-19c6c2f78cc3, invocation_timestamp=2019-07-10T01:35:17.901Z, origin=Only For Testing, session_id=c3ce822b-8d97-4291-8ae8-19c6c2f78cc3, session_timestamp=2019-07-10T01:35:17.901Z, thread-id=848, tx_id=A16308B3F19AF5A3A1258E090E246F82EFB62058809D639DD232313634028E46}
[INFO ] 2019-07-10T01:35:18,765Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=ae5bc5b4-ba43-4176-9e04-36ef452d98a8, invocation_id=c3ce822b-8d97-4291-8ae8-19c6c2f78cc3, invocation_timestamp=2019-07-10T01:35:17.901Z, origin=Only For Testing, session_id=c3ce822b-8d97-4291-8ae8-19c6c2f78cc3, session_timestamp=2019-07-10T01:35:17.901Z, thread-id=848, tx_id=A16308B3F19AF5A3A1258E090E246F82EFB62058809D639DD232313634028E46}
[INFO ] 2019-07-10T01:35:18,771Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000010, flow-id=a6b5a328-1a3e-4833-918e-f1e4dc81ca34, invocation_id=79c4eb91-ac25-4917-bb37-e29b407a9cac, invocation_timestamp=2019-07-10T01:35:18.715Z, origin=O=Mock Company 1, L=London, C=GB, session_id=79c4eb91-ac25-4917-bb37-e29b407a9cac, session_timestamp=2019-07-10T01:35:18.715Z, thread-id=848, tx_id=A16308B3F19AF5A3A1258E090E246F82EFB62058809D639DD232313634028E46}
[WARN ] 2019-07-10T01:35:18,771Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000010, flow-id=a6b5a328-1a3e-4833-918e-f1e4dc81ca34, invocation_id=79c4eb91-ac25-4917-bb37-e29b407a9cac, invocation_timestamp=2019-07-10T01:35:18.715Z, origin=O=Mock Company 1, L=London, C=GB, session_id=79c4eb91-ac25-4917-bb37-e29b407a9cac, session_timestamp=2019-07-10T01:35:18.715Z, thread-id=848, tx_id=A16308B3F19AF5A3A1258E090E246F82EFB62058809D639DD232313634028E46}
[INFO ] 2019-07-10T01:35:18,774Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000010, flow-id=a6b5a328-1a3e-4833-918e-f1e4dc81ca34, invocation_id=79c4eb91-ac25-4917-bb37-e29b407a9cac, invocation_timestamp=2019-07-10T01:35:18.715Z, origin=O=Mock Company 1, L=London, C=GB, session_id=79c4eb91-ac25-4917-bb37-e29b407a9cac, session_timestamp=2019-07-10T01:35:18.715Z, thread-id=848, tx_id=A16308B3F19AF5A3A1258E090E246F82EFB62058809D639DD232313634028E46}
[INFO ] 2019-07-10T01:35:18,778Z [Mock network] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000010, flow-id=a6b5a328-1a3e-4833-918e-f1e4dc81ca34, invocation_id=79c4eb91-ac25-4917-bb37-e29b407a9cac, invocation_timestamp=2019-07-10T01:35:18.715Z, origin=O=Mock Company 1, L=London, C=GB, session_id=79c4eb91-ac25-4917-bb37-e29b407a9cac, session_timestamp=2019-07-10T01:35:18.715Z, thread-id=848, tx_id=A16308B3F19AF5A3A1258E090E246F82EFB62058809D639DD232313634028E46}
[INFO ] 2019-07-10T01:35:18,780Z [Mock network] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000010, flow-id=a6b5a328-1a3e-4833-918e-f1e4dc81ca34, invocation_id=79c4eb91-ac25-4917-bb37-e29b407a9cac, invocation_timestamp=2019-07-10T01:35:18.715Z, origin=O=Mock Company 1, L=London, C=GB, session_id=79c4eb91-ac25-4917-bb37-e29b407a9cac, session_timestamp=2019-07-10T01:35:18.715Z, thread-id=848, tx_id=A16308B3F19AF5A3A1258E090E246F82EFB62058809D639DD232313634028E46}
[INFO ] 2019-07-10T01:35:18,785Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=ae5bc5b4-ba43-4176-9e04-36ef452d98a8, invocation_id=c3ce822b-8d97-4291-8ae8-19c6c2f78cc3, invocation_timestamp=2019-07-10T01:35:17.901Z, origin=Only For Testing, session_id=c3ce822b-8d97-4291-8ae8-19c6c2f78cc3, session_timestamp=2019-07-10T01:35:17.901Z, thread-id=848, tx_id=A16308B3F19AF5A3A1258E090E246F82EFB62058809D639DD232313634028E46}
[INFO ] 2019-07-10T01:35:18,785Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=ae5bc5b4-ba43-4176-9e04-36ef452d98a8, invocation_id=c3ce822b-8d97-4291-8ae8-19c6c2f78cc3, invocation_timestamp=2019-07-10T01:35:17.901Z, origin=Only For Testing, session_id=c3ce822b-8d97-4291-8ae8-19c6c2f78cc3, session_timestamp=2019-07-10T01:35:17.901Z, thread-id=848, tx_id=A16308B3F19AF5A3A1258E090E246F82EFB62058809D639DD232313634028E46}
[INFO ] 2019-07-10T01:35:18,840Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-013518.795/nodes/0/cordapps] {}
[INFO ] 2019-07-10T01:35:18,840Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013518.795/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T01:35:18,840Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013518.795/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T01:35:18,865Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T01:35:18,871Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T01:35:18,873Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:35:18,873Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:35:18,877Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T01:35:18.795Z
      epoch=1
  } {}
[INFO ] 2019-07-10T01:35:19,168Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T01:35:19,170Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-013518.795/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T01:35:19,170Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T01:35:19,172Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T01:35:19,173Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:19,173Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:19,225Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:19,230Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T01:35:19,243Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T01:35:19,248Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T01:35:19,248Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T01:35:19,350Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-07-10T01:35:19,363Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T01:35:19,363Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722519363) {}
[INFO ] 2019-07-10T01:35:19,365Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:19,382Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722519363) {}
[INFO ] 2019-07-10T01:35:19,388Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T01:35:19,392Z [MockNode-16-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722519363) {}
[INFO ] 2019-07-10T01:35:19,394Z [MockNode-16-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:19,422Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=64FEF25EC5F8E0513D4E4C250F2D1A440BA418A7260BDB48391FEE417CDCC19B uploader=app filename=null {}
[INFO ] 2019-07-10T01:35:19,423Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-07-10T01:35:19,423Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-07-10T01:35:19,426Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722519363) {}
[INFO ] 2019-07-10T01:35:19,428Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722519363) {}
[INFO ] 2019-07-10T01:35:19,428Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:19,428Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722519363) {}
[INFO ] 2019-07-10T01:35:19,428Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:19,430Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-013518.795/nodes/1/cordapps] {}
[INFO ] 2019-07-10T01:35:19,430Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013518.795/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T01:35:19,430Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013518.795/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T01:35:19,446Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T01:35:19,450Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T01:35:19,474Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:35:19,475Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:35:19,480Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T01:35:18.795Z
      epoch=1
  } {}
[INFO ] 2019-07-10T01:35:19,807Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T01:35:19,808Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-013518.795/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T01:35:19,808Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T01:35:19,809Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T01:35:19,810Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:19,810Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:19,856Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:19,860Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T01:35:19,863Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T01:35:19,864Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-10T01:35:19,874Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:19,874Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:19,980Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:19,992Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T01:35:19,992Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722519992) {}
[INFO ] 2019-07-10T01:35:19,994Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:20,004Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722519992) {}
[INFO ] 2019-07-10T01:35:20,009Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T01:35:20,013Z [MockNode-17-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722519992) {}
[INFO ] 2019-07-10T01:35:20,016Z [MockNode-17-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:20,046Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=64FEF25EC5F8E0513D4E4C250F2D1A440BA418A7260BDB48391FEE417CDCC19B uploader=app filename=null {}
[INFO ] 2019-07-10T01:35:20,050Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722519992) {}
[INFO ] 2019-07-10T01:35:20,051Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722519363) {}
[INFO ] 2019-07-10T01:35:20,052Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:20,056Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722519992) {}
[INFO ] 2019-07-10T01:35:20,057Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:20,061Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722519992) {}
[INFO ] 2019-07-10T01:35:20,061Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:20,061Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722519992) {}
[INFO ] 2019-07-10T01:35:20,061Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:20,063Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190710-013518.795/nodes/2/cordapps] {}
[INFO ] 2019-07-10T01:35:20,063Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013518.795/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-07-10T01:35:20,063Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/moin/Documents/corda/corda-bootcamp-practise/bootcamp-cordapp/build/mock-network/20190710-013518.795/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-07-10T01:35:20,079Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-07-10T01:35:20,083Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-07-10T01:35:20,104Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:35:20,105Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-07-10T01:35:20,107Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-07-10T01:35:18.795Z
      epoch=1
  } {}
[INFO ] 2019-07-10T01:35:20,435Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-07-10T01:35:20,436Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190710-013518.795/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-07-10T01:35:20,437Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-07-10T01:35:20,437Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-07-10T01:35:20,438Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:20,439Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:20,478Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-07-10T01:35:20,483Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-07-10T01:35:20,484Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-07-10T01:35:20,484Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-07-10T01:35:20,494Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:20,495Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:20,624Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-07-10T01:35:20,627Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-07-10T01:35:20,627Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722520627) {}
[INFO ] 2019-07-10T01:35:20,628Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:20,631Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722520627) {}
[INFO ] 2019-07-10T01:35:20,639Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-07-10T01:35:20,641Z [MockNode-18-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722520627) {}
[INFO ] 2019-07-10T01:35:20,643Z [MockNode-18-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:20,677Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=64FEF25EC5F8E0513D4E4C250F2D1A440BA418A7260BDB48391FEE417CDCC19B uploader=app filename=null {}
[INFO ] 2019-07-10T01:35:20,680Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722520627) {}
[INFO ] 2019-07-10T01:35:20,682Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1562722519363) {}
[INFO ] 2019-07-10T01:35:20,682Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:20,686Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722520627) {}
[INFO ] 2019-07-10T01:35:20,687Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:20,691Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1562722519992) {}
[INFO ] 2019-07-10T01:35:20,692Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:20,704Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722520627) {}
[INFO ] 2019-07-10T01:35:20,705Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-07-10T01:35:20,717Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722520627) {}
[INFO ] 2019-07-10T01:35:20,717Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-07-10T01:35:20,717Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1562722520627) {}
[INFO ] 2019-07-10T01:35:20,717Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2019-07-10T01:35:21,167Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=c81e78cf-d99e-4023-a3bf-9571f2f84d77, invocation_id=1210be3a-4edd-4525-a5ae-4851ff55bc4b, invocation_timestamp=2019-07-10T01:35:20.719Z, origin=Only For Testing, session_id=1210be3a-4edd-4525-a5ae-4851ff55bc4b, session_timestamp=2019-07-10T01:35:20.719Z, thread-id=1014}
[INFO ] 2019-07-10T01:35:21,193Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000012, flow-id=33d3f0ad-fc53-48f0-882f-8c2c5b56a589, invocation_id=897b8905-696b-47fe-94c5-4b6829d9ac2e, invocation_timestamp=2019-07-10T01:35:21.185Z, origin=O=Mock Company 1, L=London, C=GB, session_id=897b8905-696b-47fe-94c5-4b6829d9ac2e, session_timestamp=2019-07-10T01:35:21.185Z, thread-id=1014, tx_id=1BE4FCEAFB865A0D623B274B1D71B98C42B6911B51B1224D4BBB237DB6D4AD92}
[WARN ] 2019-07-10T01:35:21,193Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000012, flow-id=33d3f0ad-fc53-48f0-882f-8c2c5b56a589, invocation_id=897b8905-696b-47fe-94c5-4b6829d9ac2e, invocation_timestamp=2019-07-10T01:35:21.185Z, origin=O=Mock Company 1, L=London, C=GB, session_id=897b8905-696b-47fe-94c5-4b6829d9ac2e, session_timestamp=2019-07-10T01:35:21.185Z, thread-id=1014, tx_id=1BE4FCEAFB865A0D623B274B1D71B98C42B6911B51B1224D4BBB237DB6D4AD92}
[INFO ] 2019-07-10T01:35:21,198Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000012, flow-id=33d3f0ad-fc53-48f0-882f-8c2c5b56a589, invocation_id=897b8905-696b-47fe-94c5-4b6829d9ac2e, invocation_timestamp=2019-07-10T01:35:21.185Z, origin=O=Mock Company 1, L=London, C=GB, session_id=897b8905-696b-47fe-94c5-4b6829d9ac2e, session_timestamp=2019-07-10T01:35:21.185Z, thread-id=1014, tx_id=1BE4FCEAFB865A0D623B274B1D71B98C42B6911B51B1224D4BBB237DB6D4AD92}
[WARN ] 2019-07-10T01:35:21,217Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000012, flow-id=33d3f0ad-fc53-48f0-882f-8c2c5b56a589, invocation_id=897b8905-696b-47fe-94c5-4b6829d9ac2e, invocation_timestamp=2019-07-10T01:35:21.185Z, origin=O=Mock Company 1, L=London, C=GB, session_id=897b8905-696b-47fe-94c5-4b6829d9ac2e, session_timestamp=2019-07-10T01:35:21.185Z, thread-id=1014, tx_id=1BE4FCEAFB865A0D623B274B1D71B98C42B6911B51B1224D4BBB237DB6D4AD92}
[INFO ] 2019-07-10T01:35:21,224Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=c81e78cf-d99e-4023-a3bf-9571f2f84d77, invocation_id=1210be3a-4edd-4525-a5ae-4851ff55bc4b, invocation_timestamp=2019-07-10T01:35:20.719Z, origin=Only For Testing, session_id=1210be3a-4edd-4525-a5ae-4851ff55bc4b, session_timestamp=2019-07-10T01:35:20.719Z, thread-id=1014, tx_id=1BE4FCEAFB865A0D623B274B1D71B98C42B6911B51B1224D4BBB237DB6D4AD92}
[INFO ] 2019-07-10T01:35:21,225Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=c81e78cf-d99e-4023-a3bf-9571f2f84d77, invocation_id=1210be3a-4edd-4525-a5ae-4851ff55bc4b, invocation_timestamp=2019-07-10T01:35:20.719Z, origin=Only For Testing, session_id=1210be3a-4edd-4525-a5ae-4851ff55bc4b, session_timestamp=2019-07-10T01:35:20.719Z, thread-id=1014, tx_id=1BE4FCEAFB865A0D623B274B1D71B98C42B6911B51B1224D4BBB237DB6D4AD92}
[INFO ] 2019-07-10T01:35:21,232Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=c81e78cf-d99e-4023-a3bf-9571f2f84d77, invocation_id=1210be3a-4edd-4525-a5ae-4851ff55bc4b, invocation_timestamp=2019-07-10T01:35:20.719Z, origin=Only For Testing, session_id=1210be3a-4edd-4525-a5ae-4851ff55bc4b, session_timestamp=2019-07-10T01:35:20.719Z, thread-id=1014, tx_id=1BE4FCEAFB865A0D623B274B1D71B98C42B6911B51B1224D4BBB237DB6D4AD92}
[INFO ] 2019-07-10T01:35:21,238Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000012, flow-id=33d3f0ad-fc53-48f0-882f-8c2c5b56a589, invocation_id=897b8905-696b-47fe-94c5-4b6829d9ac2e, invocation_timestamp=2019-07-10T01:35:21.185Z, origin=O=Mock Company 1, L=London, C=GB, session_id=897b8905-696b-47fe-94c5-4b6829d9ac2e, session_timestamp=2019-07-10T01:35:21.185Z, thread-id=1014, tx_id=1BE4FCEAFB865A0D623B274B1D71B98C42B6911B51B1224D4BBB237DB6D4AD92}
[WARN ] 2019-07-10T01:35:21,238Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000012, flow-id=33d3f0ad-fc53-48f0-882f-8c2c5b56a589, invocation_id=897b8905-696b-47fe-94c5-4b6829d9ac2e, invocation_timestamp=2019-07-10T01:35:21.185Z, origin=O=Mock Company 1, L=London, C=GB, session_id=897b8905-696b-47fe-94c5-4b6829d9ac2e, session_timestamp=2019-07-10T01:35:21.185Z, thread-id=1014, tx_id=1BE4FCEAFB865A0D623B274B1D71B98C42B6911B51B1224D4BBB237DB6D4AD92}
[INFO ] 2019-07-10T01:35:21,240Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000012, flow-id=33d3f0ad-fc53-48f0-882f-8c2c5b56a589, invocation_id=897b8905-696b-47fe-94c5-4b6829d9ac2e, invocation_timestamp=2019-07-10T01:35:21.185Z, origin=O=Mock Company 1, L=London, C=GB, session_id=897b8905-696b-47fe-94c5-4b6829d9ac2e, session_timestamp=2019-07-10T01:35:21.185Z, thread-id=1014, tx_id=1BE4FCEAFB865A0D623B274B1D71B98C42B6911B51B1224D4BBB237DB6D4AD92}
[INFO ] 2019-07-10T01:35:21,243Z [Mock network] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000012, flow-id=33d3f0ad-fc53-48f0-882f-8c2c5b56a589, invocation_id=897b8905-696b-47fe-94c5-4b6829d9ac2e, invocation_timestamp=2019-07-10T01:35:21.185Z, origin=O=Mock Company 1, L=London, C=GB, session_id=897b8905-696b-47fe-94c5-4b6829d9ac2e, session_timestamp=2019-07-10T01:35:21.185Z, thread-id=1014, tx_id=1BE4FCEAFB865A0D623B274B1D71B98C42B6911B51B1224D4BBB237DB6D4AD92}
[INFO ] 2019-07-10T01:35:21,245Z [Mock network] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000012, flow-id=33d3f0ad-fc53-48f0-882f-8c2c5b56a589, invocation_id=897b8905-696b-47fe-94c5-4b6829d9ac2e, invocation_timestamp=2019-07-10T01:35:21.185Z, origin=O=Mock Company 1, L=London, C=GB, session_id=897b8905-696b-47fe-94c5-4b6829d9ac2e, session_timestamp=2019-07-10T01:35:21.185Z, thread-id=1014, tx_id=1BE4FCEAFB865A0D623B274B1D71B98C42B6911B51B1224D4BBB237DB6D4AD92}
[INFO ] 2019-07-10T01:35:21,250Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=c81e78cf-d99e-4023-a3bf-9571f2f84d77, invocation_id=1210be3a-4edd-4525-a5ae-4851ff55bc4b, invocation_timestamp=2019-07-10T01:35:20.719Z, origin=Only For Testing, session_id=1210be3a-4edd-4525-a5ae-4851ff55bc4b, session_timestamp=2019-07-10T01:35:20.719Z, thread-id=1014, tx_id=1BE4FCEAFB865A0D623B274B1D71B98C42B6911B51B1224D4BBB237DB6D4AD92}
[INFO ] 2019-07-10T01:35:21,250Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=c81e78cf-d99e-4023-a3bf-9571f2f84d77, invocation_id=1210be3a-4edd-4525-a5ae-4851ff55bc4b, invocation_timestamp=2019-07-10T01:35:20.719Z, origin=Only For Testing, session_id=1210be3a-4edd-4525-a5ae-4851ff55bc4b, session_timestamp=2019-07-10T01:35:20.719Z, thread-id=1014, tx_id=1BE4FCEAFB865A0D623B274B1D71B98C42B6911B51B1224D4BBB237DB6D4AD92}
